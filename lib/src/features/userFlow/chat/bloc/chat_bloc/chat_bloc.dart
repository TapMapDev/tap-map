import 'dart:async';
import 'dart:io';

import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:tap_map/src/features/userFlow/chat/bloc/chat_bloc/chat_event.dart';
import 'package:tap_map/src/features/userFlow/chat/bloc/chat_bloc/chat_state.dart';
import 'package:tap_map/src/features/userFlow/chat/data/chat_repository.dart';
import 'package:tap_map/src/features/userFlow/chat/models/chat_model.dart';
import 'package:tap_map/src/features/userFlow/chat/models/message_model.dart';
import 'package:tap_map/src/features/userFlow/chat/services/chat_websocket_service.dart';

/// –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –±–ª–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
class ChatBloc extends Bloc<ChatEvent, ChatState> {
  final ChatRepository _chatRepository;
  final ChatWebSocketService _chatWebSocketService;
  StreamSubscription<WebSocketEventData>? _webSocketSubscription;
  
  /// –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
  int? _currentChatId;
  
  /// –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ ChatWebSocketService –¥–ª—è –¥—Ä—É–≥–∏—Ö –±–ª–æ–∫–æ–≤
  ChatWebSocketService get webSocketService => _chatWebSocketService;
  
  /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–ª–æ–∫–∞
  ChatBloc({
    required ChatRepository chatRepository,
    required ChatWebSocketService chatWebSocketService,
  }) : _chatRepository = chatRepository,
       _chatWebSocketService = chatWebSocketService,
       super(const ChatInitial()) {
    // –°–æ–±—ã—Ç–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    on<FetchChatsEvent>(_onFetchChats);
    
    // –°–æ–±—ã—Ç–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
    on<FetchChatEvent>(_onFetchChat);
    on<SendMessageEvent>(_onSendMessage);
    on<NewWebSocketMessageEvent>(_onNewWebSocketMessage);
    on<ChatErrorEvent>(_onChatError);
    
    // –°–æ–±—ã—Ç–∏—è –¥–ª—è WebSocket
    on<SendTypingEvent>(_onSendTyping);
    
    // –°–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    on<UploadFileEvent>(_onUploadFile);
    on<MarkChatAsReadEvent>(_onMarkChatAsRead);
    on<MarkMessageAsReadEvent>(_onMarkMessageAsRead);
    on<DeleteMessageEvent>(_onDeleteMessage);
    on<EditMessageEvent>(_onEditMessage);
    on<PinMessageEvent>(_onPinMessage);
    on<UnpinMessageEvent>(_onUnpinMessage);
    on<GetPinnedMessageEvent>(_onGetPinnedMessage);
    on<SetReplyToMessageEvent>(_onSetReplyToMessage);
    on<SetForwardFromMessageEvent>(_onSetForwardFromMessage);
    on<UpdateMessagesEvent>(_onUpdateMessages);
    on<WebSocketMessageEditedEvent>(_onWebSocketMessageEdited);
    on<WebSocketMessageDeletedEvent>(_onWebSocketMessageDeleted);
    on<WebSocketPinMessageEvent>(_onWebSocketPinMessage);
    on<WebSocketUnpinMessageEvent>(_onWebSocketUnpinMessage);
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è WebSocket
    _subscribeToWebSocket();
  }
  
  /// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è WebSocket
  void _subscribeToWebSocket() {
    print('üîÑ ChatBloc: –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è WebSocket');
    _webSocketSubscription = _chatWebSocketService.events.listen((event) {
      print('üîÑ ChatBloc: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ WebSocket: ${event.type}');

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
      switch (event.type) {
        // –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        case WebSocketEventType.message:
        case WebSocketEventType.createMessage:
          if (event.data != null) {
            print('üîÑ ChatBloc: –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${event.data}');
            add(NewWebSocketMessageEvent(Map<String, dynamic>.from(event.data!)));
          }
          break;
          
        // –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è  
        case WebSocketEventType.editMessage:
          if (event.data != null) {
            print('üîÑ ChatBloc: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${event.data}');
            add(WebSocketMessageEditedEvent(Map<String, dynamic>.from(event.data!)));
          }
          break;
          
        // –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        case WebSocketEventType.deleteMessage:
          if (event.data != null) {
            print('üîÑ ChatBloc: –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: ${event.data}');
            add(WebSocketMessageDeletedEvent(Map<String, dynamic>.from(event.data!)));
          }
          break;
        
        // –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è  
        case WebSocketEventType.pinMessage:
          if (event.data != null) {
            print('üîÑ ChatBloc: –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ: ${event.data}');
            add(WebSocketPinMessageEvent(Map<String, dynamic>.from(event.data!)));
          }
          break;
          
        // –û—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        case WebSocketEventType.unpinMessage:
          if (event.data != null) {
            print('üîÑ ChatBloc: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ: ${event.data}');
            add(WebSocketUnpinMessageEvent(Map<String, dynamic>.from(event.data!)));
          }
          break;
          
        // –û—à–∏–±–∫–∏
        case WebSocketEventType.error:
          print('üîÑ ChatBloc: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏: ${event.error}');
          add(ChatErrorEvent(event.error ?? '–û—à–∏–±–∫–∞ WebSocket'));
          break;
          
        // –ü—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ)
        case WebSocketEventType.readAll:
          if (event.data != null) {
            print('üîÑ ChatBloc: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${event.data}');
            _handleReadAllMessages(Map<String, dynamic>.from(event.data!));
          }
          break;
          
        // –°–æ–±—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        case WebSocketEventType.connection:
          _handleConnectionEvent(event);
          break;
          
        default:
          // –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
          break;
      }
    });
  }
  
  /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  void _handleConnectionEvent(WebSocketEventData event) {
    final connectionState = event.data?['state'];
    print('üîÑ ChatBloc: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $connectionState');
    
    if (connectionState != null) {
      if (connectionState.toString().contains('connected')) {
        // –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        print('üîÑ ChatBloc: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –ü–û–î–ö–õ–Æ–ß–ï–ù–û');
        if (state is ChatLoaded) {
          final chatLoaded = state as ChatLoaded;
          emit(chatLoaded.copyWith(isConnectionActive: true));
        } else {
          emit(const ChatConnected());
        }
      } else if (connectionState.toString().contains('disconnected') || 
                connectionState.toString().contains('error')) {
        // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        print('üîÑ ChatBloc: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –û–¢–ö–õ–Æ–ß–ï–ù–û/–û–®–ò–ë–ö–ê');
        if (state is ChatLoaded) {
          final chatLoaded = state as ChatLoaded;
          emit(chatLoaded.copyWith(isConnectionActive: false));
        } else {
          emit(const ChatDisconnected(reason: '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ'));
        }
      }
    }
  }
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ—á—Ç–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
  void _handleReadAllMessages(Map<String, dynamic> eventData) {
    final chatId = eventData['chatId'] as int?;
    if (chatId != null) {
      if (state is ChatLoaded) {
        final currentState = state as ChatLoaded;
        if (currentState.chat.chatId == chatId) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
          final updatedMessages = currentState.messages.map((message) {
            return message.copyWith(isRead: true);
          }).toList();
          emit(currentState.copyWith(messages: updatedMessages));
        }
      }
    }
  }
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
  Future<void> _onFetchChats(
    FetchChatsEvent event,
    Emitter<ChatState> emit,
  ) async {
    emit(const ChatsLoading());
    try {
      final chats = await _chatRepository.fetchChats();
      emit(ChatsLoaded(chats));
    } catch (e) {
      emit(ChatError(message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: $e'));
    }
  }
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
  Future<void> _onFetchChat(
    FetchChatEvent event,
    Emitter<ChatState> emit,
  ) async {
    _currentChatId = event.chatId;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    List<MessageModel>? currentMessages;
    if (state is ChatLoaded) {
      currentMessages = (state as ChatLoaded).messages;
    }
    
    emit(ChatLoading(event.chatId, currentMessages: currentMessages));
    
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
      final chat = await _chatRepository.getChatById(event.chatId);
      if (chat == null) {
        emit(ChatError(message: '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'));
        return;
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
      final messages = await _chatRepository.getMessages(event.chatId);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      MessageModel? pinnedMessage;
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
        final pinnedMessages = await _chatRepository.getPinnedMessages(event.chatId);
        if (pinnedMessages.isNotEmpty) {
          // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–±—ã—á–Ω–æ –±—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ)
          pinnedMessage = pinnedMessages.first;
          print('üìå ChatBloc: –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, ID: ${pinnedMessage.id}');
        } else {
          print('üìå ChatBloc: –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ ${event.chatId}');
        }
      } catch (e) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        print('‚ùå ChatBloc: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      }
      
      // –û—Ç–º–µ—á–∞–µ–º —á–∞—Ç –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π
      await _chatRepository.markChatAsRead(event.chatId);
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
      bool isConnected = _chatRepository.currentConnectionState == ConnectionState.connected;
      if (!isConnected) {
        _chatRepository.connectToChat();
      }
      
      emit(ChatLoaded(
        chat: chat,
        messages: messages,
        isConnectionActive: isConnected,
        pinnedMessage: pinnedMessage, // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      ));
    } catch (e) {
      emit(ChatError(message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞: $e'));
    }
  }
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  Future<void> _onSendMessage(
    SendMessageEvent event,
    Emitter<ChatState> emit,
  ) async {
    if (state is! ChatLoaded) return;
    
    final currentState = state as ChatLoaded;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if (!currentState.isConnectionActive) {
      print('üåê ChatBloc: –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è...');
      final success = await _chatRepository.connectToChat();
      if (!success) {
        emit(currentState.copyWith());
        add(ChatErrorEvent('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'));
        return;
      }
    }
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    emit(ChatSendingMessage(
      chatId: event.chatId,
      messageText: event.text,
    ));
    
    try {
      print('üåê ChatBloc: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...');
      final message = await _chatRepository.sendMessage(
        chatId: event.chatId,
        text: event.text,
        replyToId: event.replyToId,
        forwardedFromId: event.forwardedFromId,
        attachments: event.attachments,
      );
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
      if (message != null) {
        print('üåê ChatBloc: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        // –í –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏
        // (—Å–∞–º–æ–µ –Ω–æ–≤–æ–µ –ø–µ—Ä–≤–æ–µ), –ø–æ—ç—Ç–æ–º—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤
        // ListView.reverse –º—ã –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞.
        final updatedMessages = [message, ...currentState.messages];
        
        emit(currentState.copyWith(
          messages: updatedMessages,
          clearReplyToMessage: true,
          clearForwardFromMessage: true,
          isConnectionActive: true, // –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        ));
      } else {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        print('üåê ChatBloc: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
        emit(currentState);
        add(ChatErrorEvent('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'));
      }
    } catch (e) {
      print('üåê ChatBloc: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      emit(currentState);
      add(ChatErrorEvent('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e'));
    }
  }
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç WebSocket
  Future<void> _onNewWebSocketMessage(
    NewWebSocketMessageEvent event,
    Emitter<ChatState> emit,
  ) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (state is ChatLoaded) {
      // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –æ—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç
      _processMessageForCurrentChat(event, emit);
    } else if (state is ChatsLoaded) {
      // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
      _processMessageForChatsList(event, emit);
    }
  }
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —á–∞—Ç–∞
  Future<void> _processMessageForCurrentChat(
    NewWebSocketMessageEvent event,
    Emitter<ChatState> emit,
  ) async {
    final currentState = state as ChatLoaded;
    final messageData = event.message;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    final messageType = messageData['type'];
    if (messageType == 'message' || messageType == 'create_message' || messageType == 'new_message') {
      final processedMessage = await _chatRepository.processWebSocketMessage(messageData);
      if (processedMessage != null && processedMessage.chatId == currentState.chat.chatId) {
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        final updatedMessages = List<MessageModel>.from([processedMessage, ...currentState.messages]);
        
        print('üîÑ ChatBloc: –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç ${processedMessage.chatId}, ID: ${processedMessage.id}');
        print('üîÑ ChatBloc: –ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ: ${currentState.messages.length}, –ø–æ—Å–ª–µ: ${updatedMessages.length}');
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
        final newState = currentState.copyWith(
          messages: updatedMessages
        );
        
        emit(newState);
        
        _chatWebSocketService.readMessage(chatId: processedMessage.chatId, messageId: processedMessage.id);
        _chatRepository.resetUnreadCount(processedMessage.chatId);
      }
    } else if (messageType == 'typing') {
      final chatId = messageData['chat_id'];
      final isTyping = messageData['is_typing'];
      final username = messageData['username'];
      
      if (chatId != null && isTyping != null && username != null && 
          int.parse(chatId.toString()) == currentState.chat.chatId) {
        final isUserTyping = isTyping.toString().toLowerCase() == 'true';
        emit(currentState.copyWith(
          isTyping: isUserTyping
        ));
      }
    } else if (messageType == 'read') {
      final chatId = messageData['chat_id'];
      
      if (chatId != null && int.parse(chatId.toString()) == currentState.chat.chatId) {
        // –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        final updatedMessages = currentState.messages.map((message) {
          return message.copyWith(isRead: true);
        }).toList();
        
        emit(currentState.copyWith(messages: updatedMessages));
      }
    }
  }
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ (–∫–æ–≥–¥–∞ —á–∞—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç)
  Future<void> _processMessageForChatsList(
    NewWebSocketMessageEvent event,
    Emitter<ChatState> emit,
  ) async {
    final currentState = state as ChatsLoaded;
    final messageData = event.message;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    final messageType = messageData['type'];
    if (messageType == 'message' || messageType == 'create_message' || messageType == 'new_message') {
      // –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞
      final chatId = messageData['chatId'] as int? ?? messageData['chat_id'] as int?;
      
      if (chatId != null) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        final processedMessage = await _chatRepository.processWebSocketMessage(messageData);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        final updatedChats = await _chatRepository.fetchChats();
        emit(ChatsLoaded(updatedChats));
      }
    }
  }
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ—à–∏–±–∫–∏ —á–∞—Ç–∞
  void _onChatError(
    ChatErrorEvent event,
    Emitter<ChatState> emit,
  ) {
    emit(ChatError(
      message: event.message,
      previousState: state is ChatInitial ? null : state,
    ));
  }
  
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—á–∞—Ç–∏
  void _onSendTyping(
    SendTypingEvent event,
    Emitter<ChatState> emit,
  ) {
    _chatRepository.sendTyping(
      chatId: event.chatId,
      isTyping: event.isTyping,
    );
  }
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
  Future<void> _onUploadFile(
    UploadFileEvent event,
    Emitter<ChatState> emit,
  ) async {
    if (state is! ChatLoaded) return;
    
    final currentState = state as ChatLoaded;
    
    try {
      // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
      emit(ChatUploadingFile(
        chatId: event.chatId,
        progress: 0.0,
      ));
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
      final uploadResult = await _chatRepository.uploadFile(
        file: event.file,
        onProgress: (progress) {
          emit(ChatUploadingFile(
            chatId: event.chatId,
            progress: progress,
          ));
        },
      );
      
      if (uploadResult == null) {
        emit(ChatError(
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª',
          previousState: currentState,
        ));
        return;
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º
      add(SendMessageEvent(
        chatId: event.chatId,
        text: event.caption ?? '',
        attachments: [{
          'url': uploadResult,
          'type': _getFileTypeFromExtension(event.file.path),
        }],
      ));
      
    } catch (e) {
      emit(ChatError(
        message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: $e',
        previousState: currentState,
      ));
    }
  }
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–º–µ—Ç–∫–∏ —á–∞—Ç–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
  Future<void> _onMarkChatAsRead(
    MarkChatAsReadEvent event,
    Emitter<ChatState> emit,
  ) async {
    await _chatRepository.markChatAsRead(event.chatId);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —á–∞—Ç
    if (state is ChatLoaded) {
      final currentState = state as ChatLoaded;
      
      // –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
      final updatedMessages = currentState.messages.map((message) {
        return message.copyWith(isRead: true);
      }).toList();
      
      emit(currentState.copyWith(messages: updatedMessages));
    }
  }
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
  Future<void> _onMarkMessageAsRead(
    MarkMessageAsReadEvent event,
    Emitter<ChatState> emit,
  ) async {
    if (state is! ChatLoaded) return;
    
    final currentState = state as ChatLoaded;
    
    try {
      // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
      _chatWebSocketService.readMessage(
        chatId: event.chatId,
        messageId: event.messageId,
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
      final updatedMessages = currentState.messages.map((message) {
        if (message.id == event.messageId) {
          return message.copyWith(isRead: true);
        }
        return message;
      }).toList();
      
      emit(currentState.copyWith(messages: updatedMessages));
    } catch (e) {
      emit(ChatError(
        message: '–û—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ: $e',
        previousState: currentState,
      ));
    }
  }
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
  Future<void> _onDeleteMessage(
    DeleteMessageEvent event,
    Emitter<ChatState> emit,
  ) async {
    if (state is! ChatLoaded) return;
    
    final currentState = state as ChatLoaded;
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      final success = await _chatRepository.deleteMessage(
        chatId: event.chatId,
        messageId: event.messageId,
        deleteForAll: event.action == 'all',
      );
      
      if (success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        final updatedMessages = currentState.messages.where((message) {
          return message.id != event.messageId;
        }).toList();
        
        emit(currentState.copyWith(messages: updatedMessages));
      } else {
        emit(ChatError(
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
          previousState: currentState,
        ));
      }
    } catch (e) {
      emit(ChatError(
        message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: $e',
        previousState: currentState,
      ));
    }
  }
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
  Future<void> _onEditMessage(
    EditMessageEvent event,
    Emitter<ChatState> emit,
  ) async {
    if (state is! ChatLoaded) return;
    
    final currentState = state as ChatLoaded;
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      final updatedMessage = await _chatRepository.editMessage(
        chatId: event.chatId,
        messageId: event.messageId,
        text: event.text,
      );
      
      if (updatedMessage != null) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ
        final updatedMessages = currentState.messages.map((message) {
          if (message.id == event.messageId) {
            return updatedMessage;
          }
          return message;
        }).toList();
        
        emit(currentState.copyWith(messages: updatedMessages));
      } else {
        emit(ChatError(
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
          previousState: currentState,
        ));
      }
    } catch (e) {
      emit(ChatError(
        message: '–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: $e',
        previousState: currentState,
      ));
    }
  }
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
  Future<void> _onPinMessage(
    PinMessageEvent event,
    Emitter<ChatState> emit,
  ) async {
    if (state is! ChatLoaded) return;
    
    final currentState = state as ChatLoaded;
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      final success = await _chatRepository.pinMessage(
        chatId: event.chatId,
        messageId: event.messageId,
      );
      
      if (success) {
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        add(GetPinnedMessageEvent(event.chatId));
      } else {
        emit(ChatError(
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
          previousState: currentState,
        ));
      }
    } catch (e) {
      emit(ChatError(
        message: '–û—à–∏–±–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: $e',
        previousState: currentState,
      ));
    }
  }
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
  Future<void> _onUnpinMessage(
    UnpinMessageEvent event,
    Emitter<ChatState> emit,
  ) async {
    if (state is! ChatLoaded) return;
    
    final currentState = state as ChatLoaded;
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      final success = await _chatRepository.unpinMessage(
        chatId: event.chatId,
        messageId: event.messageId,
      );
      
      if (success) {
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        add(GetPinnedMessageEvent(event.chatId));
      } else {
        emit(ChatError(
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
          previousState: currentState,
        ));
      }
    } catch (e) {
      emit(ChatError(
        message: '–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: $e',
        previousState: currentState,
      ));
    }
  }
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  Future<void> _onGetPinnedMessage(
    GetPinnedMessageEvent event,
    Emitter<ChatState> emit,
  ) async {
    if (state is! ChatLoaded) return;
    
    final currentState = state as ChatLoaded;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      final pinnedMessage = await _chatRepository.getPinnedMessage(event.chatId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç —Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      final updatedChat = currentState.chat.copyWith(
        pinnedMessageId: pinnedMessage?.id,
      );
      
      emit(currentState.copyWith(chat: updatedChat));
    } catch (e) {
      emit(ChatError(
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: $e',
        previousState: currentState,
      ));
    }
  }
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
  void _onSetReplyToMessage(
    SetReplyToMessageEvent event,
    Emitter<ChatState> emit,
  ) {
    if (state is! ChatLoaded) return;
    
    final currentState = state as ChatLoaded;
    emit(currentState.copyWith(replyToMessage: event.message));
  }
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
  void _onSetForwardFromMessage(
    SetForwardFromMessageEvent event,
    Emitter<ChatState> emit,
  ) {
    if (state is! ChatLoaded) return;
    
    final currentState = state as ChatLoaded;
    emit(currentState.copyWith(forwardFromMessage: event.message));
  }
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  Future<void> _onUpdateMessages(
    UpdateMessagesEvent event,
    Emitter<ChatState> emit,
  ) async {
    final currentState = state;
    if (currentState is ChatLoaded && currentState.chat.chatId == event.chatId) {
      emit(currentState.copyWith(
        messages: event.messages,
      ));
    }
  }
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç WebSocket
  Future<void> _onWebSocketMessageEdited(
    WebSocketMessageEditedEvent event,
    Emitter<ChatState> emit,
  ) async {
    final messageData = event.message;
    
    // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç
    final messageId = messageData['messageId'] as int?;
    final chatId = messageData['chatId'] as int?;
    final newText = messageData['text'] as String?;
    
    if (messageId != null && chatId != null && newText != null) {
      if (state is ChatLoaded) {
        // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç —á–∞—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–µ–º
        final currentState = state as ChatLoaded;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É —á–∞—Ç—É
        if (chatId == currentState.chat.chatId) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ UI
          updateMessage(messageId, newText: newText);
        }
      } else if (state is ChatsLoaded) {
        // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ - –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        final chatsState = state as ChatsLoaded;
        final updatedChats = chatsState.chats.map((chat) {
          // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
          if (chat.chatId == chatId) {
            return chat.copyWith(
              lastMessageText: newText,
            );
          }
          return chat;
        }).toList();
        
        emit(ChatsLoaded(updatedChats));
      }
    }
  }
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç WebSocket
  Future<void> _onWebSocketMessageDeleted(
    WebSocketMessageDeletedEvent event,
    Emitter<ChatState> emit,
  ) async {
    final messageData = event.message;
    
    // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    final messageId = messageData['messageId'] as int?;
    final chatId = messageData['chatId'] as int?;
    
    if (messageId != null && chatId != null) {
      if (state is ChatLoaded) {
        // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç —á–∞—Ç - –ø–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ
        final currentState = state as ChatLoaded;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É —á–∞—Ç—É
        if (chatId == currentState.chat.chatId) {
          // –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ –≤ UI
          updateMessage(messageId, isDeleted: true);
        }
      } else if (state is ChatsLoaded) {
        // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏ —É–¥–∞–ª–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        final chatsState = state as ChatsLoaded;
        final updatedChats = chatsState.chats.map((chat) {
          // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
          if (chat.chatId == chatId) {
            return chat.copyWith(
              lastMessageText: "[–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ]",
            );
          }
          return chat;
        }).toList();
        
        emit(ChatsLoaded(updatedChats));
      }
    }
  }
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç WebSocket
  Future<void> _onWebSocketPinMessage(
    WebSocketPinMessageEvent event,
    Emitter<ChatState> emit,
  ) async {
    if (state is! ChatLoaded) return;
    
    final currentState = state as ChatLoaded;
    final messageData = event.message;
    
    // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —á–∞—Ç–∞
    final messageId = messageData['messageId'] as int?;
    final chatId = messageData['chatId'] as int?;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É —á–∞—Ç—É
    if (messageId != null && chatId != null && chatId == currentState.chat.chatId) {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      final pinnedMessage = await _chatRepository.getMessageById(chatId, messageId);
      if (pinnedMessage != null) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ UI
        updatePinnedMessage(pinnedMessage);
      }
    }
  }
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç WebSocket
  Future<void> _onWebSocketUnpinMessage(
    WebSocketUnpinMessageEvent event,
    Emitter<ChatState> emit,
  ) async {
    if (state is! ChatLoaded) return;
    
    final currentState = state as ChatLoaded;
    final messageData = event.message;
    
    // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —á–∞—Ç–∞
    final messageId = messageData['messageId'] as int?;
    final chatId = messageData['chatId'] as int?;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É —á–∞—Ç—É
    if (messageId != null && chatId != null && chatId == currentState.chat.chatId) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ UI
      updatePinnedMessage(null);
    }
  }
  
  /// –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–ª–æ–∫–∞
  void updateMessage(int messageId, {String? newText, bool? isDeleted}) {
    if (state is ChatLoaded) {
      final currentState = state as ChatLoaded;
      final updatedMessages = currentState.messages.map((message) {
        if (message.id == messageId) {
          // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
          // —Ç–∞–∫ –∫–∞–∫ –≤ MessageModel –Ω–µ—Ç –ø–æ–ª—è isDeleted
          return message.copyWith(
            text: isDeleted == true ? '[–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ]' : (newText ?? message.text),
          );
        }
        return message;
      }).toList();
      
      emit(currentState.copyWith(messages: updatedMessages));
    }
  }
  
  /// –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–ª–æ–∫–∞
  void removeMessage(int messageId) {
    if (state is ChatLoaded) {
      final currentState = state as ChatLoaded;
      final updatedMessages = currentState.messages.where(
        (message) => message.id != messageId
      ).toList();
      
      emit(currentState.copyWith(messages: updatedMessages));
    }
  }
  
  /// –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  void updatePinnedMessage(MessageModel? message) {
    if (state is ChatLoaded) {
      final currentState = state as ChatLoaded;
      
      if (message != null) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        emit(currentState.copyWith(pinnedMessage: message));
      } else {
        // –°–Ω—è—Ç–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
        emit(currentState.copyWith(
          clearPinnedMessage: true,
        ));
      }
    }
  }
  
  @override
  Future<void> close() {
    _webSocketSubscription?.cancel();
    return super.close();
  }
  
  /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  String _getFileTypeFromExtension(String filePath) {
    final extension = filePath.toLowerCase().split('.').last;
    
    switch (extension) {
      case 'jpg':
      case 'jpeg':
      case 'png':
      case 'gif':
      case 'webp':
        return 'image';
      case 'mp4':
      case 'mov':
      case 'avi':
      case 'mkv':
        return 'video';
      case 'mp3':
      case 'wav':
      case 'ogg':
        return 'audio';
      case 'pdf':
        return 'document';
      default:
        return 'file';
    }
  }
}
