import 'dart:async';
import 'dart:convert';
import 'dart:math'; // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ min

import 'package:tap_map/core/shared_prefs/shared_prefs_repo.dart';
import 'package:web_socket_channel/io.dart';
import 'package:web_socket_channel/web_socket_channel.dart';

/// –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π WebSocket
enum WebSocketEventType {
  message,
  typing,
  readMessage,
  userStatus,
  error,
  connection,
  ping,
  unknown,
}

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket
enum ConnectionState {
  connecting,
  connected,
  disconnected,
  reconnecting,
  waitingForNetwork,
  error,
}

/// –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è WebSocket
class WebSocketEventData {
  final WebSocketEventType type;
  final Map<String, dynamic>? data;
  final String? error;

  WebSocketEventData({
    required this.type,
    this.data,
    this.error,
  });

  factory WebSocketEventData.fromJson(Map<String, dynamic> json) {
    final eventType = json['type'] as String?;
    WebSocketEventType type;

    switch (eventType) {
      case 'message':
        type = WebSocketEventType.message;
        break;
      case 'typing':
        type = WebSocketEventType.typing;
        break;
      case 'read_message':
        type = WebSocketEventType.readMessage;
        break;
      case 'user_status':
        type = WebSocketEventType.userStatus;
        break;
      case 'pong':
        type = WebSocketEventType.ping;
        break;
      default:
        type = WebSocketEventType.unknown;
    }

    return WebSocketEventData(
      type: type,
      data: json,
    );
  }

  factory WebSocketEventData.connectionEvent(ConnectionState state) {
    return WebSocketEventData(
      type: WebSocketEventType.connection,
      data: {
        'state': state.toString(),
      },
    );
  }

  factory WebSocketEventData.error(String errorMessage) {
    return WebSocketEventData(
      type: WebSocketEventType.error,
      error: errorMessage,
    );
  }

  factory WebSocketEventData.unknown(dynamic rawData) {
    return WebSocketEventData(
      type: WebSocketEventType.unknown,
      data: {'raw': rawData.toString()},
    );
  }

  @override
  String toString() {
    return 'WebSocketEventData{type: $type, data: $data${error != null ? ', error: $error' : ''}}';
  }
}

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WebSocket –≤ —á–∞—Ç–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
class ChatWebSocketService {
  final SharedPrefsRepository _prefsRepository;
  WebSocketChannel? _channel;
  Stream? _broadcastStream;
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  static const int _maxReconnectAttempts = 5;
  static const Duration _reconnectDelay = Duration(seconds: 3);
  static const Duration _pingInterval = Duration(seconds: 30);
  static const Duration _pingTimeout = Duration(seconds: 10);
  
  int _reconnectAttempts = 0;
  Timer? _reconnectTimer;
  Timer? _pingTimer;
  Timer? _pingTimeoutTimer;
  bool _isConnected = false;
  bool _isManuallyDisconnected = false;
  String? _currentUsername;
  bool _waitingForPingResponse = false;
  
  // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ç—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
  final StreamController<WebSocketEventData> _eventsController = 
      StreamController<WebSocketEventData>.broadcast();

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ —Å–æ–±—ã—Ç–∏–π
  Stream<WebSocketEventData> get events => _eventsController.stream;

  /// –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  ConnectionState _connectionState = ConnectionState.disconnected;
  ConnectionState get connectionState => _connectionState;

  /// –¢–µ–∫—É—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  int get reconnectAttempt => _reconnectAttempts;
  
  /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  int get maxReconnectAttempts => _maxReconnectAttempts;

  /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
  ChatWebSocketService({
    required SharedPrefsRepository prefsRepository,
  }) : _prefsRepository = prefsRepository;

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  void setCurrentUsername(String username) {
    _currentUsername = username;
  }

  /// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
  Future<bool> connect() async {
    if (_isConnected) return true;
    _isManuallyDisconnected = false;
    
    try {
      print('üåê WebSocket: –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
      _updateConnectionState(ConnectionState.connecting);
      
      final jwtToken = await _prefsRepository.getAccessToken();
      
      // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (jwtToken != null && jwtToken.isNotEmpty) {
        final visibleToken = jwtToken.length > 20 
            ? '${jwtToken.substring(0, 10)}...${jwtToken.substring(jwtToken.length - 10)}'
            : jwtToken;
        print('üåê WebSocket: JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: $visibleToken');
      } else {
        print('üåê WebSocket: –û–®–ò–ë–ö–ê - JWT —Ç–æ–∫–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ null');
      }
      
      if (jwtToken == null || jwtToken.isEmpty) {
        print('üåê WebSocket: –û—à–∏–±–∫–∞ - JWT —Ç–æ–∫–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ null');
        _handleConnectionError('JWT token is empty or null');
        return false;
      }
      
      final wsUrl = 'wss://api.tap-map.net/ws/notifications/';
      print('üåê WebSocket: –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ $wsUrl');
      
      _channel = IOWebSocketChannel.connect(
        Uri.parse(wsUrl),
        headers: {
          'Authorization': 'Bearer $jwtToken',
        },
      );
      
      print('üåê WebSocket: –ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω, –ø–æ–ª—É—á–∞–µ–º broadcast stream...');
      _broadcastStream = _channel!.stream.asBroadcastStream();
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
      _subscribeToEvents();
      
      _isConnected = true;
      print('üåê WebSocket: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      _updateConnectionState(ConnectionState.connected);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–∏–Ω–≥–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      _startPingTimer();
      
      return true;
    } catch (e) {
      print('üåê WebSocket: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e');
      _handleConnectionError(e.toString());
      return false;
    }
  }

  /// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä–∞
  void disconnect() {
    _isManuallyDisconnected = true;
    _cleanupConnection();
    _updateConnectionState(ConnectionState.disconnected);
  }

  /// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  void _cleanupConnection() {
    _isConnected = false;
    _stopPingTimer();
    _stopPingTimeoutTimer();
    _stopReconnectTimer();
    
    if (_channel != null) {
      _channel!.sink.close();
      _channel = null;
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  void _updateConnectionState(ConnectionState state) {
    _connectionState = state;
    _eventsController.add(WebSocketEventData.connectionEvent(state));
  }

  /// –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  void _attemptReconnect() {
    if (_isManuallyDisconnected) return;
    
    _reconnectAttempts++;
    _updateConnectionState(ConnectionState.reconnecting);
    
    if (_reconnectAttempts > _maxReconnectAttempts) {
      _updateConnectionState(ConnectionState.error);
      _eventsController.add(
        WebSocketEventData.error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
      );
      return;
    }
    
    connect().then((success) {
      if (!success && !_isManuallyDisconnected) {
        _reconnectTimer = Timer(_reconnectDelay, _attemptReconnect);
      } else {
        _reconnectAttempts = 0;
      }
    });
  }

  /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  void _stopReconnectTimer() {
    if (_reconnectTimer != null) {
      _reconnectTimer!.cancel();
      _reconnectTimer = null;
    }
  }

  /// –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –ø–∏–Ω–≥–∞
  void _startPingTimer() {
    _stopPingTimer();
    _pingTimer = Timer.periodic(_pingInterval, (_) => _sendPing());
  }

  /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø–∏–Ω–≥–∞
  void _stopPingTimer() {
    if (_pingTimer != null) {
      _pingTimer!.cancel();
      _pingTimer = null;
    }
  }

  /// –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–∏–Ω–≥
  void _startPingTimeoutTimer() {
    _stopPingTimeoutTimer();
    _pingTimeoutTimer = Timer(_pingTimeout, () {
      if (_waitingForPingResponse) {
        print('üåê WebSocket: –¢–ê–ô–ú-–ê–£–¢ –ü–ò–ù–ì–ê! –ù–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –∑–∞ $_pingTimeout —Å–µ–∫');
        _waitingForPingResponse = false;
        _cleanupConnection();
        _attemptReconnect();
      }
    });
  }

  /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–∏–Ω–≥
  void _stopPingTimeoutTimer() {
    if (_pingTimeoutTimer != null) {
      _pingTimeoutTimer!.cancel();
      _pingTimeoutTimer = null;
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏–Ω–≥–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  void _sendPing() {
    if (!_isConnected || _channel == null) {
      print('üåê WebSocket: –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏–Ω–≥, —Ç.–∫. —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ');
      return;
    }
    
    try {
      final timestamp = DateTime.now().millisecondsSinceEpoch;
      final jsonMessage = jsonEncode({
        'type': 'ping',
        'timestamp': timestamp,
      });
      
      print('üåê WebSocket: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏–Ω–≥ —Å timestamp=$timestamp');
      _channel!.sink.add(jsonMessage);
      _waitingForPingResponse = true;
      print('üåê WebSocket: –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–∏–Ω–≥ ($_pingTimeout —Å–µ–∫)');
      _startPingTimeoutTimer();
    } catch (e) {
      print('üåê WebSocket: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏–Ω–≥–∞: $e');
      _handleConnectionError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏–Ω–≥–∞: $e');
    }
  }

  /// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è WebSocket
  void _subscribeToEvents() {
    if (_broadcastStream == null) {
      print('üåê WebSocket: _broadcastStream is null, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è');
      return;
    }
    
    print('üåê WebSocket: –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è...');
    _broadcastStream!.listen(
      (data) {
        try {
          final shortData = data.toString().length > 100 
              ? '${data.toString().substring(0, min(100, data.toString().length))}...' 
              : data.toString();
          print('üåê WebSocket: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: $shortData');
          
          if (data is String) {
            try {
              final jsonData = jsonDecode(data) as Map<String, dynamic>;
              final event = WebSocketEventData.fromJson(jsonData);
              
              print('üåê WebSocket: –°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ ${event.type}');
              
              // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–∏–Ω–≥, –µ—Å–ª–∏ –ø—Ä–∏—à–µ–ª pong
              if (event.type == WebSocketEventType.ping) {
                print('üåê WebSocket: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –ø–∏–Ω–≥ (pong)');
                _waitingForPingResponse = false;
                _stopPingTimeoutTimer();
              }
              
              _eventsController.add(event);
            } catch (e) {
              print('üåê WebSocket: –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: $e, –¥–∞–Ω–Ω—ã–µ: ${data.toString()}');
              _eventsController.add(
                WebSocketEventData.error('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: $e')
              );
            }
          } else {
            print('üåê WebSocket: –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ-—Å—Ç—Ä–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: ${data.runtimeType}');
            _eventsController.add(WebSocketEventData.unknown(data));
          }
        } catch (e) {
          print('üåê WebSocket: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: $e');
          _eventsController.add(
            WebSocketEventData.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: $e')
          );
        }
      },
      onError: (error) {
        print('üåê WebSocket: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $error');
        _eventsController.add(WebSocketEventData.error(error.toString()));
        _cleanupConnection();
        _attemptReconnect();
      },
      onDone: () {
        print('üåê WebSocket: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        if (!_isManuallyDisconnected) {
          print('üåê WebSocket: –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è...');
          _cleanupConnection();
          _attemptReconnect();
        }
      },
    );
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  void _handleConnectionError(String error) {
    print('üåê WebSocket: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $error');
    _cleanupConnection();
    _updateConnectionState(ConnectionState.error);
    _eventsController.add(WebSocketEventData.error(error));
    
    if (!_isManuallyDisconnected) {
      print('üåê WebSocket: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ $_reconnectDelay');
      _reconnectTimer = Timer(_reconnectDelay, _attemptReconnect);
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  void sendMessage({
    required int chatId,
    required String text,
    int? replyToId,
    int? forwardedFromId,
    List<Map<String, String>>? attachments,
  }) {
    _reconnectAndExecute(() {
      final message = {
        'type': 'create_message',
        'chat_id': chatId,
        'text': text,
        if (replyToId != null) 'reply_to_id': replyToId,
        if (forwardedFromId != null) 'forwarded_from_id': forwardedFromId,
        if (attachments != null && attachments.isNotEmpty)
          'attachments': attachments,
      };
      
      _channel!.sink.add(jsonEncode(message));
    });
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—á–∞—Ç–∏
  void sendTyping({
    required int chatId,
    required bool isTyping,
  }) {
    _reconnectAndExecute(() {
      final jsonMessage = jsonEncode({
        'type': 'typing',
        'chat_id': chatId,
        'is_typing': isTyping,
      });
      
      _channel!.sink.add(jsonMessage);
    });
  }

  /// –û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
  void readMessage({
    required int chatId,
    required int messageId,
  }) {
    _reconnectAndExecute(() {
      final jsonMessage = jsonEncode({
        'type': 'read_message',
        'chat_id': chatId,
        'message_id': messageId,
      });
      
      _channel!.sink.add(jsonMessage);
    });
  }

  /// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  void editMessage({
    required int chatId,
    required int messageId,
    required String text,
  }) {
    _reconnectAndExecute(() {
      final jsonMessage = jsonEncode({
        'type': 'edit_message',
        'chat_id': chatId,
        'message_id': messageId,
        'text': text,
        'edited_at': DateTime.now().toIso8601String(),
      });
      
      _channel!.sink.add(jsonMessage);
    });
  }

  /// –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
  void _reconnectAndExecute(Function action) {
    if (!_isConnected || _channel == null) {
      connect().then((success) {
        if (success) {
          action();
        }
      });
      return;
    }
    
    try {
      action();
    } catch (e) {
      _handleConnectionError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è: $e');
      connect().then((success) {
        if (success) {
          action();
        }
      });
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  bool isConnected() {
    return _isConnected && _channel != null;
  }

  /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  void dispose() {
    _cleanupConnection();
    _eventsController.close();
  }
}
