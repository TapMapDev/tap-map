import 'dart:io';

import 'package:tap_map/src/features/userFlow/chat/data/local/chat_data_source.dart';
import 'package:tap_map/src/features/userFlow/chat/data/remote/remote_chat_data_source.dart';
import 'package:tap_map/src/features/userFlow/chat/models/chat_model.dart';
import 'package:tap_map/src/features/userFlow/chat/models/message_model.dart';
import 'package:tap_map/src/features/userFlow/chat/services/chat_websocket_service.dart';
import 'package:tap_map/src/features/userFlow/user_profile/data/user_repository.dart';

/// –ù–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
class ChatRepository {
  final RemoteChatDataSource _remoteChatDataSource;
  final ChatDataSource _localChatDataSource;
  final ChatWebSocketService _webSocketService;
  final UserRepository _userRepository;

  ChatRepository({
    required RemoteChatDataSource remoteChatDataSource,
    required ChatDataSource localChatDataSource,
    required ChatWebSocketService webSocketService,
    required UserRepository userRepository,
  })  : _remoteChatDataSource = remoteChatDataSource,
        _localChatDataSource = localChatDataSource,
        _webSocketService = webSocketService,
        _userRepository = userRepository;

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  Future<List<ChatModel>> fetchChats() async {
    try {
      print('üì± ChatRepository: –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞');
      final remoteChats = await _remoteChatDataSource.getChats();
      print('üì± ChatRepository: –ü–æ–ª—É—á–µ–Ω–æ ${remoteChats.length} —á–∞—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞');

      print('üíæ ChatRepository: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ ${remoteChats.length} —á–∞—Ç–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      await _localChatDataSource.cacheChats(remoteChats);
      print('üíæ ChatRepository: –ß–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã');

      final sorted = List<ChatModel>.from(remoteChats)
        ..sort((a, b) {
          if (a.isPinned == b.isPinned) {
            return (a.pinOrder ?? 0).compareTo(b.pinOrder ?? 0);
          }
          return a.isPinned ? -1 : 1;
        });

      return sorted;
    } catch (e) {
      print('‚ùå ChatRepository: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞: $e');
      print('üìÇ ChatRepository: –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
      final localChats = await _localChatDataSource.getChats();
      print('üìÇ ChatRepository: –ü–æ–ª—É—á–µ–Ω–æ ${localChats.length} —á–∞—Ç–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
      return localChats;
    }
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å —á–∞—Ç –∏ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  Future<Map<String, dynamic>> fetchChatWithMessages(int chatId) async {
    print('üìÇ ChatRepository: –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–∞ $chatId –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
    final localChat = await _localChatDataSource.getChatById(chatId);
    print('üìÇ ChatRepository: –ß–∞—Ç $chatId ${localChat != null ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'} –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
    
    final localMessages = await _localChatDataSource.getCachedMessagesForChat(chatId);
    print('üìÇ ChatRepository: –ü–æ–ª—É—á–µ–Ω–æ ${localMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è —á–∞—Ç–∞ $chatId');
    
    final localPinnedId = await _localChatDataSource.getPinnedMessageId(chatId);
    print('üìÇ ChatRepository: –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: $localPinnedId –¥–ª—è —á–∞—Ç–∞ $chatId –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');

    if (localChat != null && localMessages.isNotEmpty) {
      print('üìÇ ChatRepository: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞');
      // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
      () async {
        try {
          print('üì± ChatRepository: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ $chatId —Å —Å–µ—Ä–≤–µ—Ä–∞');
          final remoteChat = await _remoteChatDataSource.getChatById(chatId);
          final remoteMessages = await _remoteChatDataSource.getMessagesForChat(chatId);
          final pinnedId = await _remoteChatDataSource.getPinnedMessageId(chatId);
          print('üì± ChatRepository: –ü–æ–ª—É—á–µ–Ω–æ —Å —Å–µ—Ä–≤–µ—Ä–∞: —á–∞—Ç: ${remoteChat != null}, —Å–æ–æ–±—â–µ–Ω–∏–π: ${remoteMessages.length}, –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ ID: $pinnedId');

          if (remoteChat != null) {
            print('üíæ ChatRepository: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞ $chatId');
            await _localChatDataSource.cacheChat(remoteChat.copyWith(pinnedMessageId: pinnedId));
            await _localChatDataSource.cacheMessages(chatId, remoteMessages);
            print('üíæ ChatRepository: –î–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ $chatId —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –∫—ç—à–µ');
          }
        } catch (e) {
          print('‚ùå ChatRepository: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞: $e');
        }
      }();

      return {
        'chat': localChat,
        'messages': localMessages,
        'pinnedMessageId': localPinnedId,
      };
    }

    try {
      print('üì± ChatRepository: –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–∞ $chatId —Å —Å–µ—Ä–≤–µ—Ä–∞');
      final chat = await _remoteChatDataSource.getChatById(chatId);
      final messages = await _remoteChatDataSource.getMessagesForChat(chatId);
      print('üì± ChatRepository: –ü–æ–ª—É—á–µ–Ω–æ —Å —Å–µ—Ä–≤–µ—Ä–∞: —á–∞—Ç: ${chat != null}, —Å–æ–æ–±—â–µ–Ω–∏–π: ${messages.length}');

      // –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      final pinnedMessageId = await _remoteChatDataSource.getPinnedMessageId(chatId);
      print('üì± ChatRepository: –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: $pinnedMessageId —Å —Å–µ—Ä–≤–µ—Ä–∞');

      // –ö—ç—à–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (chat != null) {
        print('üíæ ChatRepository: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞ $chatId –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
        await _localChatDataSource.cacheChat(chat.copyWith(pinnedMessageId: pinnedMessageId));
        await _localChatDataSource.cacheMessages(chatId, messages);
        print('üíæ ChatRepository: –î–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ $chatId —É—Å–ø–µ—à–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã');
      }

      return {
        'chat': chat,
        'messages': messages,
        'pinnedMessageId': pinnedMessageId,
      };
    } catch (e) {
      print('‚ùå ChatRepository: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞: $e');
      if (localChat != null) {
        print('üìÇ ChatRepository: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞');
        return {
          'chat': localChat,
          'messages': localMessages,
          'pinnedMessageId': localPinnedId,
        };
      }

      print('‚ùå ChatRepository: –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞: $e');
    }
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–∞—Ç –ø–æ ID (–º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  Future<ChatModel?> getChatById(int chatId) async {
    try {
      final result = await fetchChatWithMessages(chatId);
      return result['chat'] as ChatModel?;
    } catch (e) {
      return null;
    }
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ (–º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  Future<List<MessageModel>> getMessages(int chatId) async {
    try {
      final result = await fetchChatWithMessages(chatId);
      return result['messages'] as List<MessageModel>;
    } catch (e) {
      return [];
    }
  }
  
  /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç
  Future<int> createChat({required String type, required int participantId}) async {
    return await _remoteChatDataSource.createChat(
      type: type,
      participantId: participantId,
    );
  }
  
  /// –û—Ç–º–µ—Ç–∏—Ç—å —á–∞—Ç –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π
  Future<void> markChatAsRead(int chatId) async {
    try {
      // –û—Ç–º–µ—á–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      await _remoteChatDataSource.markChatAsRead(chatId);
      // –ò –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ
      await _localChatDataSource.markChatAsRead(chatId);
    } catch (e) {
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–º–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ
      await _localChatDataSource.markChatAsRead(chatId);
      rethrow;
    }
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
  Future<List<MessageModel>> getChatHistory(int chatId) async {
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
      final messages = await _remoteChatDataSource.getMessagesForChat(chatId);
      // –ö—ç—à–∏—Ä—É–µ–º
      await _localChatDataSource.cacheMessages(chatId, messages);
      return messages;
    } catch (e) {
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫—ç—à–∞
      return await _localChatDataSource.getCachedMessagesForChat(chatId);
    }
  }
  
  /// –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
  Future<bool> deleteMessage({
    required int chatId, 
    required int messageId, 
    required bool deleteForAll
  }) async {
    try {
      final action = deleteForAll ? 'all' : 'for_me';
      // –£–¥–∞–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      await _remoteChatDataSource.deleteMessage(chatId, messageId, action);
      // –ò –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ
      await _localChatDataSource.deleteMessage(chatId, messageId, action);
      return true;
    } catch (e) {
      // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ (–¥–ª—è —Å–µ–±—è)
      if (!deleteForAll) {
        try {
          await _localChatDataSource.deleteMessage(chatId, messageId, 'for_me');
          return true;
        } catch (_) {
          return false;
        }
      }
      return false;
    }
  }
  
  /// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
  Future<MessageModel?> editMessage({
    required int chatId, 
    required int messageId, 
    required String text
  }) async {
    try {
      // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      final editedMessage = await _remoteChatDataSource.editMessage(chatId, messageId, text);
      // –ò –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ
      await _localChatDataSource.editMessage(chatId, messageId, text);
      return editedMessage;
    } catch (e) {
      return null;
    }
  }
  
  /// –ó–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
  Future<bool> pinMessage({
    required int chatId,
    required int messageId,
  }) async {
    try {
      print('üì± ChatRepository: –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è $messageId –≤ —á–∞—Ç–µ $chatId');
      // –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      await _remoteChatDataSource.pinMessage(chatId: chatId, messageId: messageId);
      // –ò –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ
      await _localChatDataSource.pinMessage(chatId: chatId, messageId: messageId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
      print('üì± ChatRepository: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è');
      await _updatePinnedMessagesAsync(chatId);
      
      return true;
    } catch (e) {
      print('‚ùå ChatRepository: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      return false;
    }
  }
  
  /// –û—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
  Future<bool> unpinMessage({
    required int chatId,
    required int messageId,
  }) async {
    try {
      print('üì± ChatRepository: –û—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è $messageId –≤ —á–∞—Ç–µ $chatId');
      // –û—Ç–∫—Ä–µ–ø–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      await _remoteChatDataSource.unpinMessage(chatId: chatId, messageId: messageId);
      // –ò –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ
      await _localChatDataSource.unpinMessage(chatId: chatId, messageId: messageId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è
      print('üì± ChatRepository: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è');
      await _updatePinnedMessagesAsync(chatId);
      
      return true;
    } catch (e) {
      print('‚ùå ChatRepository: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      return false;
    }
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å ID –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  Future<int?> getPinnedMessageId(int chatId) async {
    try {
      return await _remoteChatDataSource.getPinnedMessageId(chatId);
    } catch (e) {
      return await _localChatDataSource.getPinnedMessageId(chatId);
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞
  Future<MessageModel?> getPinnedMessage(int chatId) async {
    try {
      print('üìÇ ChatRepository: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ $chatId');
      final pinnedMessages = await getPinnedMessages(chatId);
      if (pinnedMessages.isNotEmpty) {
        print('üìÇ ChatRepository: –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —á–∞—Ç–∞ $chatId');
        return pinnedMessages.first;
      } else {
        print('üìÇ ChatRepository: –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —á–∞—Ç–∞ $chatId');
        return null;
      }
    } catch (e) {
      print('‚ùå ChatRepository: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      return null;
    }
  }
  
  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
  Future<String> uploadFile({
    required File file,
    Function(double)? onProgress,
  }) async {
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –º–æ–∂–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —É–¥–∞–ª–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
    return await _remoteChatDataSource.uploadFile(
      file.path
    );
  }
  
  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
  Future<MessageModel> sendMessage({
    required int chatId,
    required String text,
    int? replyToId,
    int? forwardedFromId,
    List<Map<String, String>>? attachments,
  }) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ WebSocketService
      if (_webSocketService.currentUsername == null) {
        print('‚ùå ChatRepository: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ WebSocketService');
        throw Exception('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ WebSocketService');
      }
      
      print('üì§ ChatRepository: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç $chatId —á–µ—Ä–µ–∑ WebSocket');
      final message = await _remoteChatDataSource.sendMessage(
        chatId: chatId,
        text: text,
        replyToId: replyToId,
        forwardedFromId: forwardedFromId,
        attachments: attachments,
      );
      
      print('üíæ ChatRepository: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      // –ö—ç—à–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await _localChatDataSource.cacheMessage(message.chatId, message);
      print('üíæ ChatRepository: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ, ID: ${message.id}');
      
      return message;
    } catch (e) {
      print('‚ùå ChatRepository: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
    }
  }
  
  /// –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª
  Future<void> cacheMediaFile(String url, String contentType) async {
    try {
      print('üñºÔ∏è ChatRepository: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –≤ –∫—ç—à–µ: $url');
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–∞–π–ª –≤ –∫—ç—à–µ
      final existingPath = await _localChatDataSource.getMediaFilePath(url);
      if (existingPath != null) {
        print('üñºÔ∏è ChatRepository: –ú–µ–¥–∏–∞—Ñ–∞–π–ª —É–∂–µ –≤ –∫—ç—à–µ: $existingPath');
        return; // –§–∞–π–ª —É–∂–µ –≤ –∫—ç—à–µ
      }
      
      print('üñºÔ∏è ChatRepository: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞');
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫—ç—à–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      final cacheDir = await _getCacheDirectory();
      if (!await cacheDir.exists()) {
        await cacheDir.create(recursive: true);
        print('üñºÔ∏è ChatRepository: –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫—ç—à–∞: ${cacheDir.path}');
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
      final fileName = _generateFileName(url, contentType);
      final localPath = '${cacheDir.path}/$fileName';
      
      print('üñºÔ∏è ChatRepository: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      // –ö—ç—à–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
      await _localChatDataSource.cacheMediaFile(url, localPath, contentType);
      print('üñºÔ∏è ChatRepository: –ú–µ–¥–∏–∞—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω');
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
      print('–û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: $e');
    }
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –º–µ–¥–∏–∞—Ñ–∞–π–ª—É
  Future<String?> getMediaFilePath(String url) async {
    return await _localChatDataSource.getMediaFilePath(url);
  }
  
  /// –ù–∞–±–ª—é–¥–∞—Ç—å –∑–∞ —Å–ø–∏—Å–∫–æ–º —á–∞—Ç–æ–≤ (—Å—Ç—Ä–∏–º)
  Stream<List<ChatModel>> watchChats() {
    return _localChatDataSource.watchChats();
  }
  
  /// –ù–∞–±–ª—é–¥–∞—Ç—å –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á–∞—Ç–∞ (—Å—Ç—Ä–∏–º)
  Stream<List<MessageModel>> watchMessages(int chatId) {
    return _localChatDataSource.watchMessages(chatId);
  }
  
  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ WebSocket
  
  /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ç–æ–∫ —Å–æ–±—ã—Ç–∏–π WebSocket
  Stream<WebSocketEventData> get webSocketEvents => _webSocketService.events;
  
  /// –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å WebSocket
  ChatWebSocketService get webSocketService => _webSocketService;
  
  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  ConnectionState get currentConnectionState => _webSocketService.connectionState;
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  
  Future<Directory> _getCacheDirectory() async {
    final cacheDir = Directory('/Users/jkaseq/Documents/projects/tap-map/cache/chat_media');
    return cacheDir;
  }
  
  String _generateFileName(String url, String contentType) {
    final extension = _getExtensionFromContentType(contentType);
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    final fileName = '${url.hashCode}_$timestamp$extension';
    return fileName;
  }
  
  String _getExtensionFromContentType(String contentType) {
    if (contentType.startsWith('image/jpeg')) return '.jpg';
    if (contentType.startsWith('image/png')) return '.png';
    if (contentType.startsWith('image/gif')) return '.gif';
    if (contentType.startsWith('image/webp')) return '.webp';
    if (contentType.startsWith('video/mp4')) return '.mp4';
    if (contentType.startsWith('video/quicktime')) return '.mov';
    return '';
  }

  /// –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —á–∞—Ç—É —á–µ—Ä–µ–∑ WebSocket
  Future<bool> connectToChat() async {
    try {
      final success = await _webSocketService.connect();
      
      // –ü–æ–ª—É—á–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final user = await _userRepository.getCurrentUser();
      if (user.username != null) {
        _webSocketService.setCurrentUsername(user.username!);
      }
      
      return success;
    } catch (e) {
      print('‚ùå ChatRepository: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —á–∞—Ç—É: $e');
      return false;
    }
  }

  /// –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —á–∞—Ç–∞
  void disconnectFromChat() {
    _webSocketService.disconnect();
  }

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å "–ü–µ—á–∞—Ç–∞–µ—Ç"
  void sendTyping({required int chatId, required bool isTyping}) {
    _webSocketService.sendTyping(chatId: chatId, isTyping: isTyping);
  }

  /// –û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
  void markMessageAsRead({required int chatId, required int messageId}) {
    _webSocketService.readMessage(chatId: chatId, messageId: messageId);
  }

  /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ WebSocket –∏ –æ–±–æ–≥–∞—Ç–∏—Ç—å –µ–≥–æ –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  Future<MessageModel?> processWebSocketMessage(Map<String, dynamic> messageData) async {
    try {
      final senderId = messageData['sender_id'] as int?;
      if (senderId == null) {
        print('‚ùå ChatRepository: No sender_id in message data');
        return null;
      }

      final user = await _userRepository.getUserById(senderId);
      if (user.username == null) {
        print('‚ùå ChatRepository: No username for sender_id: $senderId');
        return null;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ attachments
      final attachments = messageData['attachments'];
      dynamic processedAttachments = attachments;
      
      // –ï—Å–ª–∏ attachments - —ç—Ç–æ Map, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ List
      if (attachments is Map) {
        processedAttachments = [attachments];
      } else if (attachments != null && !(attachments is List)) {
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ List –∏ –Ω–µ Map, —Ç–æ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        processedAttachments = [];
      }
      
      final messageDataWithCorrectAttachments = {
        ...messageData,
        'attachments': processedAttachments,
        'sender_username': user.username,
      };

      final newMessage = MessageModel.fromJson(messageDataWithCorrectAttachments);

      print('üì® ChatRepository: Processed message - id: ${newMessage.id}, sender: ${newMessage.senderUsername}, text: ${newMessage.text}');
      
      print('üíæ ChatRepository: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      // –ö—ç—à–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await _localChatDataSource.cacheMessage(newMessage.chatId, newMessage);
      print('üíæ ChatRepository: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ');
      
      return newMessage;
    } catch (e) {
      print('‚ùå ChatRepository: Error processing WebSocket message: $e');
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –µ–≥–æ ID
  Future<MessageModel?> getMessageById(int chatId, int messageId) async {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ
      final localMessage = await _localChatDataSource.getMessageById(chatId, messageId);
      if (localMessage != null) {
        return localMessage;
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
      return await _remoteChatDataSource.getMessageById(chatId, messageId);
    } catch (e) {
      print('‚ùå ChatRepository: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID $messageId: $e');
      return null;
    }
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
  Future<List<MessageModel>> getPinnedMessages(int chatId) async {
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
      print('üì± ChatRepository: –ó–∞–ø—Ä–æ—Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ $chatId');
      final pinnedMessages = await _remoteChatDataSource.getPinnedMessages(chatId);
      
      print('üì± ChatRepository: –ü–æ–ª—É—á–µ–Ω–æ ${pinnedMessages.length} –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞');
      
      // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
      for (var message in pinnedMessages) {
        await _localChatDataSource.cacheMessage(chatId, message);
      }
      
      return pinnedMessages;
    } catch (e) {
      print('‚ùå ChatRepository: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: $e');
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      try {
        final localPinnedMessages = await _localChatDataSource.getPinnedMessages(chatId);
        print('üìÇ ChatRepository: –ü–æ–ª—É—á–µ–Ω–æ ${localPinnedMessages.length} –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
        return localPinnedMessages;
      } catch (e) {
        print('‚ùå ChatRepository: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: $e');
        return [];
      }
    }
  }

  /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
  Future<void> _updatePinnedMessagesAsync(int chatId) async {
    try {
      print('üì± ChatRepository: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ $chatId');
      final pinnedMessages = await _remoteChatDataSource.getPinnedMessages(chatId);
      print('üì± ChatRepository: –ü–æ–ª—É—á–µ–Ω–æ ${pinnedMessages.length} –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      for (var message in pinnedMessages) {
        await _localChatDataSource.cacheMessage(chatId, message);
      }
      
      print('üì± ChatRepository: –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ $chatId —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –∫—ç—à–µ');
    } catch (e) {
      print('‚ùå ChatRepository: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: $e');
    }
  }
}
