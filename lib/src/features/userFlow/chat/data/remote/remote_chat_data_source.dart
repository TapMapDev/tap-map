import 'dart:convert';

import 'package:dio/dio.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:tap_map/core/network/dio_client.dart';
import 'package:tap_map/src/features/userFlow/chat/data/local/chat_data_source.dart';
import 'package:tap_map/src/features/userFlow/chat/models/chat_model.dart';
import 'package:tap_map/src/features/userFlow/chat/models/message_model.dart';
import 'package:tap_map/src/features/userFlow/chat/services/chat_websocket_service.dart';

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Ç–æ–≤
class RemoteChatDataSource implements ChatDataSource {
  final DioClient _dioClient;
  final SharedPreferences _prefs;
  static const String _pinnedMessageKey = 'pinned_message_';
  ChatWebSocketService? _webSocketService;

  RemoteChatDataSource({
    required DioClient dioClient,
    required SharedPreferences prefs,
    ChatWebSocketService? webSocketService,
  })  : _dioClient = dioClient,
        _prefs = prefs,
        _webSocketService = webSocketService;

  @override
  Future<List<ChatModel>> getChats() async {
    try {
      final response = await _dioClient.get('/chat/list/');

      if (response.statusCode == 200) {
        final List<dynamic> data = response.data;
        final chats = data.map((json) => ChatModel.fromJson(json)).toList();
        return chats;
      }
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤: ${response.statusCode}');
    } catch (e) {
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤: $e');
    }
  }

  @override
  Future<ChatModel?> getChatById(int chatId) async {
    try {
      final response = await _dioClient.get('/chat/$chatId/');

      if (response.statusCode == 200) {
        return ChatModel.fromJson(response.data);
      }
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç: ${response.statusCode}');
    } catch (e) {
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç: $e');
    }
  }

  @override
  Future<List<MessageModel>> getMessagesForChat(int chatId) async {
    try {
      final response = await _dioClient.get('/chat/$chatId/messages/');
      if (response.statusCode == 200) {
        final List<dynamic> messagesData = response.data;
        final messages = messagesData.map((json) => MessageModel.fromJson(json)).toList();
        return messages;
      }
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞: ${response.statusCode}');
    } catch (e) {
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞: $e');
    }
  }

  @override
  Future<int> createChat({required String type, required int participantId}) async {
    try {
      final formData = FormData.fromMap({
        'type': type,
        'participants_ids[]': participantId,
      });

      final response = await _dioClient.post(
        '/chat/create/',
        data: formData,
      );

      if (response.statusCode == 201 || response.statusCode == 200) {
        return response.data['chat_id'] as int;
      } else {
        throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç: $e');
    }
  }

  @override
  Future<void> markChatAsRead(int chatId) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
      final messages = await getMessagesForChat(chatId);
      
      if (_webSocketService == null) {
        throw Exception('ChatWebSocketService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }
      
      // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
      for (final message in messages) {
        if (!message.isRead) {
          _webSocketService!.readMessage(
            chatId: chatId,
            messageId: message.id,
          );
        }
      }
    } catch (e) {
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —á–∞—Ç –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π: $e');
    }
  }

  @override
  Future<void> deleteMessage(int chatId, int messageId, String action) async {
    try {
      final url = '/chat/$chatId/messages/$messageId/delete/';
      final data = {'action': action};
      final response = await _dioClient.post(
        url,
        data: data,
      );

      if (response.statusCode != 200) {
        throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: $e');
    }
  }

  @override
  Future<MessageModel> editMessage(int chatId, int messageId, String text) async {
    try {
      final response = await _dioClient.patch(
        '/chat/$chatId/messages/$messageId/edit/',
        data: {
          'text': text,
          'edited_at': DateTime.now().toIso8601String(),
        },
      );

      if (response.statusCode == 200) {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
        final Map<String, dynamic> data = response.data;
        return MessageModel.fromJson(data);
      } else {
        throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: $e');
    }
  }

  @override
  Future<MessageModel> sendMessage({
    required int chatId,
    required String text,
    int? replyToId,
    int? forwardedFromId,
    List<Map<String, String>>? attachments,
  }) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ ChatWebSocketService
      if (_webSocketService == null) {
        throw Exception('ChatWebSocketService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
      _webSocketService!.sendMessage(
        chatId: chatId,
        text: text,
        replyToId: replyToId,
        forwardedFromId: forwardedFromId,
        attachments: attachments,
      );

      // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ WebSocketService –∏–ª–∏ –∏–∑ SharedPreferences
      String? username = _webSocketService?.currentUsername;
      username ??= _prefs.getString('chat_username');
      if (username == null) {
        throw Exception('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      }

      // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º ID
      final temporaryId = DateTime.now().millisecondsSinceEpoch;
      final message = MessageModel(
        id: temporaryId,
        text: text,
        chatId: chatId,
        replyToId: replyToId,
        forwardedFromId: forwardedFromId,
        createdAt: DateTime.now(),
        senderUsername: username,
        isRead: false,
        type: _getMessageType(attachments),
        attachments: attachments ?? [],
      );
      
      return message;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
    }
  }
  
  @override
  Future<void> markMessageAsRead({required int chatId, required int messageId}) async {
    if (_webSocketService == null) {
      throw Exception('ChatWebSocketService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
    _webSocketService!.readMessage(
      chatId: chatId,
      messageId: messageId,
    );
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–ª–æ–∂–µ–Ω–∏–π
  MessageType _getMessageType(List<Map<String, String>>? attachments) {
    if (attachments == null || attachments.isEmpty) {
      return MessageType.text;
    }

    final contentType = attachments.first['content_type']?.toLowerCase() ?? '';
    if (contentType.startsWith('video/')) {
      return MessageType.video;
    } else if (contentType.startsWith('image/')) {
      return MessageType.image;
    } else {
      return MessageType.file;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –µ–≥–æ ID —Å —Å–µ—Ä–≤–µ—Ä–∞
  Future<MessageModel?> getMessageById(int chatId, int messageId) async {
    try {
      print('üì± RemoteChatDataSource: –ó–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID $messageId –¥–ª—è —á–∞—Ç–∞ $chatId');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–µ–¥–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö
      final pinnedMessages = await getPinnedMessages(chatId);
      final foundMessage = pinnedMessages.where((message) => message.id == messageId).toList();
      if (foundMessage.isNotEmpty) {
        return foundMessage.first;
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ä–µ–¥–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö, –∏ —ç—Ç–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
      // –∑–Ω–∞—á–∏—Ç –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å —Å—Ä–µ–¥–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
      final pinnedId = await getPinnedMessageId(chatId);
      if (pinnedId == messageId) {
        print('‚ùå RemoteChatDataSource: –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID $messageId –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ API –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π');
      }
      
      // –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID
      print('‚ùå RemoteChatDataSource: –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID');
      return null;
    } catch (e) {
      print('‚ùå RemoteChatDataSource: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID: $e');
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
  @override
  Future<List<MessageModel>> getPinnedMessages(int chatId) async {
    try {
      print('üì± RemoteChatDataSource: –ó–∞–ø—Ä–æ—Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ $chatId');
      final response = await _dioClient.client.get('/chat/$chatId/messages/pinned/');
      
      if (response.statusCode == 200) {
        final List<dynamic> data = response.data;
        final messages = data.map((json) => MessageModel.fromJson(json)).toList();
        print('üì± RemoteChatDataSource: –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ $chatId');
        
        // –ö—ç—à–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for (final message in messages) {
          await cacheMessage(chatId, message);
        }
        
        return messages;
      } else {
        print('‚ùå RemoteChatDataSource: –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥ ${response.statusCode} –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π');
        return [];
      }
    } catch (e) {
      print('‚ùå RemoteChatDataSource: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: $e');
      return [];
    }
  }

  @override
  Future<void> pinMessage({
    required int chatId,
    required int messageId,
  }) async {
    try {
      final url = '/chat/$chatId/messages/$messageId/pin/';

      final response = await _dioClient.client.post(
        url,
        data: {},
        options: Options(
          headers: _dioClient.client.options.headers,
        ),
      );

      if (response.statusCode == 200 || response.statusCode == 201) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ
        await _prefs.setInt('$_pinnedMessageKey$chatId', messageId);
      } else {
        throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
    }
  }

  @override
  Future<void> unpinMessage({
    required int chatId,
    required int messageId,
  }) async {
    try {
      final url = '/chat/$chatId/messages/$messageId/unpin/';

      final response = await _dioClient.client.post(
        url,
        data: {},
        options: Options(
          headers: _dioClient.client.options.headers,
        ),
      );

      if (response.statusCode == 200 || response.statusCode == 201) {
        // –£–¥–∞–ª—è–µ–º ID –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        await _prefs.remove('$_pinnedMessageKey$chatId');
      } else {
        throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
    }
  }

  @override
  Future<int?> getPinnedMessageId(int chatId) async {
    try {
      print('üìå RemoteChatDataSource: –ó–∞–ø—Ä–æ—Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ $chatId');
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
      final cachedId = _prefs.getInt('$_pinnedMessageKey$chatId');
      if (cachedId != null) {
        print('üìå RemoteChatDataSource: –ù–∞–π–¥–µ–Ω –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π ID –≤ –∫—ç—à–µ: $cachedId');
        return cachedId;
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      final response = await _dioClient.client.get('/chat/$chatId/');
      if (response.statusCode == 200) {
        final data = response.data as Map<String, dynamic>;
        final pinnedMessageId = data['pinned_message_id'] as int?;
        
        if (pinnedMessageId != null) {
          print('üìå RemoteChatDataSource: –ü–æ–ª—É—á–µ–Ω –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π ID —Å —Å–µ—Ä–≤–µ—Ä–∞: $pinnedMessageId');
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
          await _prefs.setInt('$_pinnedMessageKey$chatId', pinnedMessageId);
        } else {
          print('üìå RemoteChatDataSource: –ù–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ $chatId');
        }
        
        return pinnedMessageId;
      }
      return null;
    } catch (e) {
      print('üìå RemoteChatDataSource: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ ID: $e');
      return null;
    }
  }

  @override
  Future<String> uploadFile(String filePath) async {
    try {
      final file = await MultipartFile.fromFile(filePath);
      final formData = FormData.fromMap({'file': file});
      final response = await _dioClient.client.post(
        '/chat/upload_file/',
        data: formData,
        options: Options(
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        ),
      );
      if (response.statusCode != 200 && response.statusCode != 201) {
        throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ${response.statusCode}');
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
      final attachments = response.data['attachments'] as List;
      if (attachments.isEmpty) {
        throw Exception('–ù–µ—Ç URL —Ñ–∞–π–ª–∞ –≤ –æ—Ç–≤–µ—Ç–µ');
      }

      final fileUrl = attachments[0]['url'] as String;
      return fileUrl;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: $e');
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º - –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã
  
  @override
  Future<List<MessageModel>> getCachedMessagesForChat(int chatId) async {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —Ç–∞–∫ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –∏–º–µ–µ—Ç –∫—ç—à–∞
    return [];
  }
  
  @override
  Future<void> cacheMessages(int chatId, List<MessageModel> messages) async {
    // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —Ç.–∫. —É–¥–∞–ª–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –∫—ç—à–∏—Ä—É–µ—Ç
  }

  @override
  Future<void> cacheMessage(int chatId, MessageModel message) async {
    // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —Ç.–∫. —É–¥–∞–ª–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –∫—ç—à–∏—Ä—É–µ—Ç
  }

  @override
  Future<void> cacheChat(ChatModel chat) async {
    // –£–¥–∞–ª–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –∫—ç—à–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ
  }

  @override
  Future<void> cacheChats(List<ChatModel> chats) async {
    // –£–¥–∞–ª–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –∫—ç—à–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ
  }
  
  @override
  Future<void> cacheMediaFile(String url, String localPath, String contentType) async {
    // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —Ç.–∫. —É–¥–∞–ª–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –∫—ç—à–∏—Ä—É–µ—Ç
  }
  
  @override
  Future<String?> getMediaFilePath(String url) async {
    // –£–¥–∞–ª–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    return null;
  }
  
  @override
  Stream<List<ChatModel>> watchChats() {
    // –£–¥–∞–ª–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –¥–∞–Ω–Ω—ã–º–∏
    throw UnimplementedError('–ú–µ—Ç–æ–¥ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞');
  }
  
  @override
  Stream<List<MessageModel>> watchMessages(int chatId) {
    // –£–¥–∞–ª–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –¥–∞–Ω–Ω—ã–º–∏
    throw UnimplementedError('–ú–µ—Ç–æ–¥ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞');
  }
}
