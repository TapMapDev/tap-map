import 'dart:convert';
import 'dart:io';

import 'package:drift/drift.dart';
import 'package:path_provider/path_provider.dart';
import 'package:tap_map/src/features/userFlow/chat/data/local/chat_data_source.dart';
import 'package:tap_map/src/features/userFlow/chat/data/local/chat_database.dart';
import 'package:tap_map/src/features/userFlow/chat/models/chat_model.dart';
import 'package:tap_map/src/features/userFlow/chat/models/message_model.dart';

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Ç–æ–≤
class LocalChatDataSource implements ChatDataSource {
  final ChatDatabase _database;
  
  LocalChatDataSource(this._database);
  
  @override
  Future<List<ChatModel>> getChats() async {
    print('üìÇ LocalChatDataSource: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    final chats = await _database.getAllChats();
    print('üìÇ LocalChatDataSource: –ü–æ–ª—É—á–µ–Ω–æ ${chats.length} —á–∞—Ç–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    return chats.map(_mapChatToModel).toList();
  }
  
  @override
  Stream<List<ChatModel>> watchChats() {
    print('üìÇ LocalChatDataSource: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ —Å–ø–∏—Å–∫–æ–º —á–∞—Ç–æ–≤');
    return _database.watchAllChats().map(
      (chats) {
        print('üìÇ LocalChatDataSource: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ ${chats.length} —á–∞—Ç–æ–≤');
        return chats.map(_mapChatToModel).toList();
      },
    );
  }
  
  @override
  Future<ChatModel?> getChatById(int chatId) async {
    print('üìÇ LocalChatDataSource: –ü–æ–∏—Å–∫ —á–∞—Ç–∞ —Å ID $chatId –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    final chat = await _database.getChatById(chatId);
    if (chat == null) {
      print('üìÇ LocalChatDataSource: –ß–∞—Ç —Å ID $chatId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return null;
    }
    print('üìÇ LocalChatDataSource: –ß–∞—Ç —Å ID $chatId –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    return _mapChatToModel(chat);
  }
  
  @override
  Future<List<MessageModel>> getMessagesForChat(int chatId) async {
    print('üìÇ LocalChatDataSource: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ $chatId –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    final messages = await _database.getMessagesForChat(chatId);
    print('üìÇ LocalChatDataSource: –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ $chatId –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    return messages.map(_messageEntityToModel).toList();
  }
  
  @override
  Stream<List<MessageModel>> watchMessages(int chatId) {
    print('üìÇ LocalChatDataSource: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á–∞—Ç–∞ $chatId');
    return _database.watchMessagesForChat(chatId).map(
      (messages) {
        print('üìÇ LocalChatDataSource: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ $chatId, –ø–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π');
        return messages.map(_messageEntityToModel).toList();
      },
    );
  }
  
  @override
  Future<int> createChat({required String type, required int participantId}) {
    // –õ–æ–∫–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —á–∞—Ç—ã
    throw UnimplementedError('–õ–æ–∫–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —á–∞—Ç—ã');
  }
  
  @override
  Future<void> markChatAsRead(int chatId) async {
    print('üìÇ LocalChatDataSource: –û—Ç–º–µ—Ç–∫–∞ —á–∞—Ç–∞ $chatId –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    await _database.markMessagesAsRead(chatId);
    print('üìÇ LocalChatDataSource: –ß–∞—Ç $chatId –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π');
  }
  
  @override
  Future<MessageModel> sendMessage({
    required int chatId, 
    required String text, 
    int? replyToId, 
    int? forwardedFromId,
    List<Map<String, String>>? attachments,
  }) {
    // –õ–æ–∫–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    throw UnimplementedError('–õ–æ–∫–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è');
  }
  
  @override
  Future<void> deleteMessage(int chatId, int messageId, String action) async {
    print('üìÇ LocalChatDataSource: –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID $messageId –∏–∑ —á–∞—Ç–∞ $chatId');
    await _database.deleteMessage(messageId);
    print('üìÇ LocalChatDataSource: –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID $messageId —É–¥–∞–ª–µ–Ω–æ');
  }
  
  @override
  Future<void> editMessage(int chatId, int messageId, String text) async {
    print('üìÇ LocalChatDataSource: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID $messageId –∏–∑ —á–∞—Ç–∞ $chatId');
    final message = await _database.getMessageById(chatId, messageId);
    if (message != null) {
      await _database.insertMessage(
        MessagesCompanion(
          messageId: Value(messageId),
          chatId: Value(chatId),
          messageText: Value(text), 
          senderUsername: Value(message.senderUsername),
          senderUserId: Value(message.senderUserId),
          createdAt: Value(message.createdAt),
          editedAt: Value(DateTime.now()),
          replyToId: Value(message.replyToId),
          forwardedFromId: Value(message.forwardedFromId),
          attachmentsJson: Value(message.attachmentsJson), 
          messageType: Value(message.messageType), 
          isPinned: Value(message.isPinned),
          isRead: Value(message.isRead),
          isMe: Value(message.isMe),
        ),
      );
      print('üìÇ LocalChatDataSource: –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID $messageId –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ');
    }
  }
  
  @override
  Future<void> pinMessage({required int chatId, required int messageId}) async {
    print('üìÇ LocalChatDataSource: –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID $messageId –≤ —á–∞—Ç–µ $chatId');
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    final message = await _database.getMessageById(chatId, messageId);
    if (message != null) {
      await _database.insertMessage(
        MessagesCompanion(
          messageId: Value(messageId),
          chatId: Value(chatId),
          messageText: Value(message.messageText), 
          senderUsername: Value(message.senderUsername),
          senderUserId: Value(message.senderUserId),
          createdAt: Value(message.createdAt),
          editedAt: Value(message.editedAt),
          replyToId: Value(message.replyToId),
          forwardedFromId: Value(message.forwardedFromId),
          attachmentsJson: Value(message.attachmentsJson), 
          messageType: Value(message.messageType), 
          isPinned: const Value(true),
          isRead: Value(message.isRead),
          isMe: Value(message.isMe),
        ),
      );
      print('üìÇ LocalChatDataSource: –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID $messageId –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º ID –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
    final chat = await _database.getChatById(chatId);
    if (chat != null) {
      await _database.insertChat(
        ChatsCompanion(
          chatId: Value(chatId),
          chatName: Value(chat.chatName),
          lastMessageText: Value(chat.lastMessageText),
          lastMessageSenderUsername: Value(chat.lastMessageSenderUsername),
          lastMessageCreatedAt: Value(chat.lastMessageCreatedAt),
          unreadCount: Value(chat.unreadCount),
          pinnedMessageId: Value(messageId),
          updatedAt: Value(chat.updatedAt),
        ),
      );
      print('üìÇ LocalChatDataSource: ID –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —á–∞—Ç–µ $chatId');
    }
  }
  
  @override
  Future<void> unpinMessage({required int chatId, required int messageId}) async {
    print('üìÇ LocalChatDataSource: –û—Ç–º–µ–Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID $messageId –≤ —á–∞—Ç–µ $chatId');
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    final message = await _database.getMessageById(chatId, messageId);
    if (message != null) {
      await _database.insertMessage(
        MessagesCompanion(
          messageId: Value(messageId),
          chatId: Value(chatId),
          messageText: Value(message.messageText), 
          senderUsername: Value(message.senderUsername),
          senderUserId: Value(message.senderUserId),
          createdAt: Value(message.createdAt),
          editedAt: Value(message.editedAt),
          replyToId: Value(message.replyToId),
          forwardedFromId: Value(message.forwardedFromId),
          attachmentsJson: Value(message.attachmentsJson), 
          messageType: Value(message.messageType), 
          isPinned: const Value(false),
          isRead: Value(message.isRead),
          isMe: Value(message.isMe),
        ),
      );
      print('üìÇ LocalChatDataSource: –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID $messageId –æ—Ç–º–µ–Ω–µ–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º ID –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
    final chat = await _database.getChatById(chatId);
    if (chat != null) {
      await _database.insertChat(
        ChatsCompanion(
          chatId: Value(chatId),
          chatName: Value(chat.chatName),
          lastMessageText: Value(chat.lastMessageText),
          lastMessageSenderUsername: Value(chat.lastMessageSenderUsername),
          lastMessageCreatedAt: Value(chat.lastMessageCreatedAt),
          unreadCount: Value(chat.unreadCount),
          pinnedMessageId: const Value(null),
          updatedAt: Value(chat.updatedAt),
        ),
      );
      print('üìÇ LocalChatDataSource: ID –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —á–∞—Ç–µ $chatId');
    }
  }
  
  @override
  Future<int?> getPinnedMessageId(int chatId) async {
    print('üìÇ LocalChatDataSource: –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ $chatId');
    final chat = await _database.getChatById(chatId);
    return chat?.pinnedMessageId;
  }
  
  @override
  Future<String> uploadFile(String filePath) {
    // –õ–æ–∫–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã
    throw UnimplementedError('–õ–æ–∫–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã');
  }
  
  @override
  Future<List<MessageModel>> getCachedMessagesForChat(int chatId) async {
    print('üìÇ LocalChatDataSource: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ $chatId');
    final messages = await getMessagesForChat(chatId);
    print('üìÇ LocalChatDataSource: –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${messages.length} –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ $chatId');
    return messages;
  }
  
  @override
  Future<void> cacheMessages(int chatId, List<MessageModel> messages) async {
    print('üìÇ LocalChatDataSource: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ $chatId');
    int successCount = 0;
    
    for (final message in messages) {
      try {
        await cacheMessage(chatId, message);
        successCount++;
      } catch (e) {
        print('‚ùå LocalChatDataSource: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${message.id}: $e');
      }
    }
    
    print('üìÇ LocalChatDataSource: –£—Å–ø–µ—à–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ $successCount –∏–∑ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ $chatId');
  }
  
  @override
  Future<void> cacheMessage(int chatId, MessageModel message) async {
    print('üìÇ LocalChatDataSource: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ${message.id} –¥–ª—è —á–∞—Ç–∞ $chatId');
    
    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ attachments –≤ JSON —Å—Ç—Ä–æ–∫—É
      final String? attachmentsJson = message.attachments.isNotEmpty
          ? jsonEncode(message.attachments)
          : null;

      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ reactions –≤ JSON —Å—Ç—Ä–æ–∫—É
      final String? reactionsJson = message.reactionsSummary != null
          ? jsonEncode(message.reactionsSummary)
          : null;
      
      // –í—Å—Ç–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await _database.insertMessage(
        MessagesCompanion(
          messageId: Value(message.id),
          chatId: Value(chatId),
          messageText: Value(message.text),
          senderUsername: Value(message.senderUsername),
          createdAt: Value(message.createdAt),
          editedAt: Value(message.editedAt),
          replyToId: Value(message.replyToId),
          forwardedFromId: Value(message.forwardedFromId),
          attachmentsJson: Value(attachmentsJson),
          messageType: Value(message.type.toString().split('.').last),
          isPinned: Value(message.isPinned),
          isRead: Value(message.isRead),
          senderUserId: Value(message.senderUserId),
          commentsCount: Value(message.commentsCount),
          reactionsJson: Value(reactionsJson),
          pinOrder: Value(message.pinOrder),
        ),
      );

      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
      if (message.isPinned) {
        await _database.updateChatPinnedMessage(chatId, message.id);
      }
      
      print('‚úÖ LocalChatDataSource: –°–æ–æ–±—â–µ–Ω–∏–µ ${message.id} —É—Å–ø–µ—à–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ');
    } catch (e) {
      print('‚ùå LocalChatDataSource: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      rethrow;
    }
  }

  @override
  Future<void> cacheChat(ChatModel chat) async {
    print('üìÇ LocalChatDataSource: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ —Å ID ${chat.chatId}');
    try {
      await _database.insertChat(
        ChatsCompanion(
          chatId: Value(chat.chatId),
          chatName: Value(chat.chatName),
          lastMessageText: Value(chat.lastMessageText),
          lastMessageSenderUsername: Value(chat.lastMessageSenderUsername),
          lastMessageCreatedAt: Value(chat.lastMessageCreatedAt),
          unreadCount: Value(chat.unreadCount),
          pinnedMessageId: Value(chat.pinnedMessageId),
          updatedAt: Value(DateTime.now()),
        ),
      );
      print('üìÇ LocalChatDataSource: –ß–∞—Ç —Å ID ${chat.chatId} —É—Å–ø–µ—à–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω');
    } catch (e) {
      print('‚ùå LocalChatDataSource: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–∞—Ç–∞ ${chat.chatId}: $e');
    }
  }

  @override
  Future<void> cacheChats(List<ChatModel> chats) async {
    print('üìÇ LocalChatDataSource: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ ${chats.length} —á–∞—Ç–æ–≤');
    int successCount = 0;
    
    for (final chat in chats) {
      try {
        await cacheChat(chat);
        successCount++;
      } catch (e) {
        print('‚ùå LocalChatDataSource: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–∞—Ç–∞ ${chat.chatId}: $e');
      }
    }
    
    print('üìÇ LocalChatDataSource: –£—Å–ø–µ—à–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ $successCount –∏–∑ ${chats.length} —á–∞—Ç–æ–≤');
  }
  
  @override
  Future<void> cacheMediaFile(String url, String localPath, String contentType) async {
    print('üìÇ LocalChatDataSource: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ —Å URL $url –≤ $localPath');
    
    try {
      final attachments = await (_database.messageAttachments.select()
        ..where((a) => a.url.equals(url)))
        .get();
        
      if (attachments.isNotEmpty) {
        print('üìÇ LocalChatDataSource: –ù–∞–π–¥–µ–Ω–æ ${attachments.length} –≤–ª–æ–∂–µ–Ω–∏–π —Å URL $url');
        for (final attachment in attachments) {
          await _database.updateAttachmentLocalPath(attachment.id, localPath);
        }
        print('üìÇ LocalChatDataSource: –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–∏–π');
      } else {
        print('üìÇ LocalChatDataSource: –í–ª–æ–∂–µ–Ω–∏—è —Å URL $url –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }
    } catch (e) {
      print('‚ùå LocalChatDataSource: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: $e');
    }
  }
  
  @override
  Future<String?> getMediaFilePath(String url) async {
    print('üìÇ LocalChatDataSource: –ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –¥–ª—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ —Å URL $url');
    
    try {
      final attachments = await (_database.messageAttachments.select()
        ..where((a) => a.url.equals(url)))
        .get();
        
      if (attachments.isNotEmpty && attachments.first.localPath != null) {
        final filePath = attachments.first.localPath!;
        final file = File(filePath);
        if (await file.exists()) {
          print('üìÇ LocalChatDataSource: –ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: $filePath');
          return filePath;
        } else {
          print('üìÇ LocalChatDataSource: –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –Ω–∞–π–¥–µ–Ω, –Ω–æ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $filePath');
        }
      } else {
        print('üìÇ LocalChatDataSource: –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è URL $url –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      return null;
    } catch (e) {
      print('‚ùå LocalChatDataSource: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: $e');
      return null;
    }
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –µ–≥–æ ID –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
  Future<MessageModel?> getMessageById(int chatId, int messageId) async {
    try {
      print('üìÇ LocalChatDataSource: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è $messageId –¥–ª—è —á–∞—Ç–∞ $chatId –∏–∑ –∫—ç—à–∞');
      final message = await _database.getMessageById(chatId, messageId);
      if (message == null) {
        print('üìÇ LocalChatDataSource: –°–æ–æ–±—â–µ–Ω–∏–µ $messageId –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ');
        return null;
      }
      print('üìÇ LocalChatDataSource: –°–æ–æ–±—â–µ–Ω–∏–µ $messageId –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ');
      return _messageEntityToModel(message);
    } catch (e) {
      print('‚ùå LocalChatDataSource: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID: $e');
      return null;
    }
  }

  @override
  Future<List<MessageModel>> getPinnedMessages(int chatId) async {
    try {
      print('üìÇ LocalChatDataSource: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ $chatId');
      final pinnedMessageId = await getPinnedMessageId(chatId);
      if (pinnedMessageId == null) {
        print('üìÇ LocalChatDataSource: ID –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —á–∞—Ç–∞ $chatId');
        return [];
      }
      
      final message = await getMessageById(chatId, pinnedMessageId);
      if (message != null) {
        print('üìÇ LocalChatDataSource: –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ $chatId');
        return [message];
      } else {
        print('üìÇ LocalChatDataSource: –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        return [];
      }
    } catch (e) {
      print('‚ùå LocalChatDataSource: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: $e');
      return [];
    }
  }
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—è–º–∏
  
  ChatModel _mapChatToModel(Chat chat) {
    return ChatModel(
      chatId: chat.chatId,
      chatName: chat.chatName,
      lastMessageText: chat.lastMessageText,
      lastMessageSenderUsername: chat.lastMessageSenderUsername,
      lastMessageCreatedAt: chat.lastMessageCreatedAt,
      unreadCount: chat.unreadCount,
      pinnedMessageId: chat.pinnedMessageId,
    );
  }
  
  MessageModel _messageEntityToModel(Message message) {
    return MessageModel(
      id: message.messageId,
      chatId: message.chatId,
      text: message.messageText,
      senderUsername: message.senderUsername,
      createdAt: message.createdAt,
      editedAt: message.editedAt,
      replyToId: message.replyToId,
      forwardedFromId: message.forwardedFromId,
      attachments: _decodeAttachments(message.attachmentsJson),
      type: _parseMessageType(message.messageType),
      isPinned: message.isPinned,
      isRead: message.isRead,
      senderUserId: message.senderUserId,
      isMe: false, 
      commentsCount: message.commentsCount,
      reactionsSummary: _decodeReactions(message.reactionsJson),
      pinOrder: message.pinOrder,
    );
  }
  
  String _encodeAttachments(List<Map<String, String>> attachments) {
    if (attachments.isEmpty) return '';
    return jsonEncode(attachments);
  }
  
  List<Map<String, String>> _decodeAttachments(String? encodedAttachments) {
    if (encodedAttachments == null || encodedAttachments.isEmpty) {
      return [];
    }
    
    try {
      final dynamic decoded = jsonDecode(encodedAttachments);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–≥–¥–∞ encodedAttachments - —ç—Ç–æ Map, –∞ –Ω–µ List
      if (decoded is Map) {
        return [Map<String, String>.from(decoded)];
      }
      
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è List
      if (decoded is List) {
        return decoded
            .map((item) => Map<String, String>.from(item as Map))
            .toList();
      }
      
      return [];
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–ª–æ–∂–µ–Ω–∏–π: $e');
      return [];
    }
  }
  
  Map<String, dynamic>? _decodeReactions(String? encodedReactions) {
    if (encodedReactions == null || encodedReactions.isEmpty) {
      return null;
    }
    
    try {
      final dynamic decoded = jsonDecode(encodedReactions);
      if (decoded is Map) {
        return Map<String, dynamic>.from(decoded);
      }
      return null;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π: $e');
      return null;
    }
  }
  
  MessageType _parseMessageType(String type) {
    try {
      return MessageType.values.firstWhere(
        (t) => t.toString().split('.').last == type,
        orElse: () => MessageType.text,
      );
    } catch (_) {
      return MessageType.text;
    }
  }
}
