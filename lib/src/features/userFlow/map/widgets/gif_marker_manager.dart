import 'dart:async';
import 'dart:convert';
import 'dart:typed_data';
import 'dart:ui' as ui;

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:mapbox_maps_flutter/mapbox_maps_flutter.dart' as mapbox;
import 'package:video_player/video_player.dart';

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤
bool _enableDetailedLogs = false;

// –ö—ç—à –¥–ª—è GIF-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
class GifCache {
  static final Map<String, ui.Codec> _cache = {};

  static Future<ui.Codec> getGif(String url) async {
    if (_cache.containsKey(url)) {
      return _cache[url]!;
    }

    final bytes = await _loadGifBytes(url);
    if (bytes == null) {
      throw Exception('Failed to load GIF from $url');
    }

    final codec = await ui.instantiateImageCodec(bytes);
    _cache[url] = codec;
    return codec;
  }

  static Future<Uint8List?> _loadGifBytes(String url) async {
    try {
      final response = await http.get(Uri.parse(url));
      if (response.statusCode == 200) {
        return response.bodyBytes;
      }
      return null;
    } catch (e) {
      debugPrint('‚ùå Error loading GIF bytes: $e');
      return null;
    }
  }

  static void clear() {
    _cache.clear();
  }
}

// –í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—ã—Ö GIF
class LoopingGifWidget extends StatefulWidget {
  final String url;
  final BoxFit fit;

  const LoopingGifWidget({
    super.key,
    required this.url,
    this.fit = BoxFit.cover,
  });

  @override
  State<LoopingGifWidget> createState() => _LoopingGifWidgetState();
}

class _LoopingGifWidgetState extends State<LoopingGifWidget>
    with SingleTickerProviderStateMixin {
  ui.Codec? _codec;
  ui.FrameInfo? _frameInfo;
  late AnimationController _controller;
  int _currentFrame = 0;
  bool _isLoading = true;
  bool _hasError = false;
  String? _errorMessage;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(vsync: this);
    _controller.addListener(_updateFrame);
    _loadGif();
  }

  Future<void> _loadGif() async {
    try {
      _isLoading = true;
      if (mounted) setState(() {});

      final codec = await GifCache.getGif(widget.url);
      if (!mounted) return;

      _codec = codec;
      _frameInfo = await codec.getNextFrame();
      _isLoading = false;
      _hasError = false;

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–¥—Ä–∞
      if (_frameInfo != null) {
        _controller.duration = _frameInfo!.duration;
        _controller.repeat();
      }

      if (mounted) setState(() {});
    } catch (e) {
      debugPrint('‚ùå Error loading GIF: $e');
      _isLoading = false;
      _hasError = true;
      _errorMessage = e.toString();
      if (mounted) setState(() {});
    }
  }

  void _updateFrame() async {
    if (_codec == null || !mounted) return;

    try {
      _frameInfo = await _codec!.getNextFrame();
      _currentFrame = (_currentFrame + 1) % _codec!.frameCount;

      if (_frameInfo != null) {
        _controller.duration = _frameInfo!.duration;
      }

      if (mounted) setState(() {});
    } catch (e) {
      debugPrint('‚ùå Error updating GIF frame: $e');
    }
  }

  @override
  void dispose() {
    _controller.removeListener(_updateFrame);
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return const Center(child: CircularProgressIndicator());
    }

    if (_hasError || _frameInfo == null) {
      return Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Icon(Icons.error, color: Colors.red),
            if (_errorMessage != null)
              Text(
                _errorMessage!,
                style: const TextStyle(color: Colors.red, fontSize: 10),
                textAlign: TextAlign.center,
              ),
          ],
        ),
      );
    }

    return RawImage(
      image: _frameInfo!.image,
      fit: widget.fit,
    );
  }
}

class GifMarkerManager extends StatefulWidget {
  final mapbox.MapboxMap mapboxMap;

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
  static final GlobalKey<_GifMarkerManagerState> globalKey =
      GlobalKey<_GifMarkerManagerState>();

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
  static void updateMarkers() {
    final state = globalKey.currentState;
    if (state != null && !state._isDisposed) {
      state.reinitialize();
    }
  }

  const GifMarkerManager({
    super.key,
    required this.mapboxMap,
  });

  @override
  State<GifMarkerManager> createState() => _GifMarkerManagerState();
}

class _GifMarkerManagerState extends State<GifMarkerManager>
    with WidgetsBindingObserver {
  final Map<String, _MarkerData> _markersById = {};
  bool _isDisposed = false;
  bool _isInitialized = false;
  bool _isInitializing = false;
  Timer? _updateTimer;
  mapbox.CameraState? _lastCameraState;
  int _initializationAttempts = 0;
  static const int _maxInitializationAttempts = 3;
  Timer? _styleCheckTimer;

  @override
  void initState() {
    super.initState();
    if (_enableDetailedLogs) {
      debugPrint('üé¨ GifMarkerManager: initState called');
    }
    WidgetsBinding.instance.addObserver(this);

    // –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, —á—Ç–æ –∫–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _scheduleInitialization();
    });
  }

  void _scheduleInitialization() {
    if (_isInitializing || _isInitialized || _isDisposed) return;

    _isInitializing = true;
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    final delay = Duration(seconds: 1 + _initializationAttempts);
    debugPrint(
        'üé¨ GifMarkerManager: Scheduling initialization in ${delay.inSeconds}s (attempt ${_initializationAttempts + 1})');

    Future.delayed(delay, () {
      if (mounted && !_isDisposed && !_isInitialized) {
        _initialize();
      }
    });
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    if (_enableDetailedLogs) {
      debugPrint('üé¨ GifMarkerManager: AppLifecycleState changed to $state');
    }
    if (state == AppLifecycleState.resumed) {
      // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω
      if (!_isInitialized && mounted && !_isDisposed) {
        if (_enableDetailedLogs) {
          debugPrint('üé¨ GifMarkerManager: Reinitializing after resume');
        }
        reinitialize();
      }
    } else if (state == AppLifecycleState.paused) {
      // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—à–ª–æ –≤ —Ñ–æ–Ω - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      _updateTimer?.cancel();
      _styleCheckTimer?.cancel();
    }
  }

  @override
  void deactivate() {
    debugPrint('üé¨ GifMarkerManager: deactivate called');
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∏–¥–∂–µ—Ç–∞
    _updateTimer?.cancel();
    _styleCheckTimer?.cancel();
    super.deactivate();
  }

  // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  void reinitialize() {
    if (_isDisposed) return;
    _clearMarkers();
    _isInitialized = false;
    _isInitializing = false;
    _initializationAttempts = 0;
    _scheduleInitialization();
  }

  Future<void> _initialize() async {
    if (_isDisposed || _isInitialized) {
      _isInitializing = false;
      return;
    }

    try {
      debugPrint(
          'üé¨ GifMarkerManager: Initializing... (attempt ${_initializationAttempts + 1})');
      _initializationAttempts++;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —Å—Ç–∏–ª—å –∫–∞—Ä—Ç—ã
      final styleURI = await widget.mapboxMap.style.getStyleURI();
      if (styleURI.isEmpty) {
        debugPrint('‚ùå GifMarkerManager: Style not loaded yet');
        _isInitializing = false;
        if (_initializationAttempts < _maxInitializationAttempts) {
          _scheduleInitialization();
        } else {
          // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å—Ç–∏–ª—å –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
          _startStyleCheckTimer();
        }
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ—è
      final layers = await widget.mapboxMap.style.getStyleLayers();
      final layerExists =
          layers.any((layer) => layer?.id == "places_symbol_layer");

      if (!layerExists) {
        debugPrint('‚ùå GifMarkerManager: places_symbol_layer not found');
        _isInitializing = false;
        if (_initializationAttempts < _maxInitializationAttempts) {
          _scheduleInitialization();
        } else {
          // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å–ª–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
          _startStyleCheckTimer();
        }
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–∫–∏
      final features = await widget.mapboxMap.queryRenderedFeatures(
        mapbox.RenderedQueryGeometry(
          type: mapbox.Type.SCREEN_BOX,
          value: jsonEncode({
            "min": {"x": 0, "y": 0},
            "max": {"x": 10000, "y": 10000}
          }),
        ),
        mapbox.RenderedQueryOptions(
          layerIds: ["places_symbol_layer"],
          filter: null,
        ),
      );

      if (_enableDetailedLogs) {
        debugPrint('üé¨ GifMarkerManager: Found ${features.length} features');
      }

      if (features.isEmpty) {
        debugPrint(
            '‚ùå GifMarkerManager: No features found in places_symbol_layer');
        _isInitializing = false;
        if (_initializationAttempts < _maxInitializationAttempts) {
          _scheduleInitialization();
        } else {
          // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ —Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
          _startStyleCheckTimer();
        }
        return;
      }

      if (_isDisposed) {
        _isInitializing = false;
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ç–æ—á–∫—É
      int processedMarkers = 0;
      for (final feature in features) {
        if (feature == null || _isDisposed) continue;

        final properties =
            feature.queriedFeature.feature as Map<dynamic, dynamic>;
        final id = properties['id']?.toString();

        if (id == null) continue;
        if (_markersById.containsKey(id)) continue;

        // –ò—â–µ–º URL –≤–∏–¥–µ–æ
        String? videoUrl = _findVideoUrl(properties);

        if (videoUrl == null) continue;

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        final geometry = properties['geometry'] as Map<dynamic, dynamic>?;
        if (geometry == null) continue;

        final coordinates = geometry['coordinates'] as List?;
        if (coordinates == null || coordinates.length < 2) continue;

        // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä
        await _createVideoMarker(id, coordinates, videoUrl);
        processedMarkers++;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —Å–æ–∑–¥–∞–Ω—ã –º–∞—Ä–∫–µ—Ä—ã
      if (processedMarkers == 0 && _markersById.isEmpty) {
        debugPrint(
            '‚ö†Ô∏è GifMarkerManager: No markers were created, will retry later');
        _isInitializing = false;
        if (_initializationAttempts < _maxInitializationAttempts) {
          _scheduleInitialization();
        } else {
          // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ –º–∞—Ä–∫–µ—Ä—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
          _startStyleCheckTimer();
        }
        return;
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –º–∞—Ä–∫–µ—Ä–æ–≤
      _startUpdateTimer();

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∏–ª—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–ø—É—â–µ–Ω
      _styleCheckTimer?.cancel();

      _isInitialized = true;
      _isInitializing = false;
      debugPrint(
          '‚úÖ GifMarkerManager: Initialization complete with ${_markersById.length} markers (processed $processedMarkers)');
    } catch (e) {
      debugPrint('‚ùå GifMarkerManager: Error initializing: $e');
      _isInitializing = false;
      if (_initializationAttempts < _maxInitializationAttempts) {
        _scheduleInitialization();
      } else {
        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        _startStyleCheckTimer();
      }
    }
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∏–ª—è –∏ —Å–ª–æ–µ–≤
  void _startStyleCheckTimer() {
    _styleCheckTimer?.cancel();
    debugPrint('üé¨ GifMarkerManager: Starting style check timer');
    _styleCheckTimer = Timer.periodic(const Duration(seconds: 3), (timer) {
      if (!mounted || _isDisposed || _isInitialized || _isInitializing) {
        timer.cancel();
        return;
      }
      debugPrint('üé¨ GifMarkerManager: Checking style and layers...');
      _scheduleInitialization();
    });
  }

  void _startUpdateTimer() {
    _updateTimer?.cancel();
    // –£–º–µ–Ω—å—à–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ 30 –∫–∞–¥—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É, —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
    _updateTimer = Timer.periodic(const Duration(milliseconds: 33), (_) {
      if (mounted && !_isDisposed) {
        _updateMarkerPositions();
      }
    });
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –º–∞—Ä–∫–µ—Ä–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
  Future<void> _updateMarkerPositions() async {
    if (!mounted || _isDisposed || _markersById.isEmpty) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –∫–∞–º–µ—Ä–∞
    final cameraState = await widget.mapboxMap.getCameraState();
    bool cameraChanged = false;

    if (_lastCameraState == null) {
      cameraChanged = true;
    } else {
      final zoomDiff = (_lastCameraState!.zoom != cameraState.zoom);
      final bearingDiff = (_lastCameraState!.bearing != cameraState.bearing);
      final pitchDiff = (_lastCameraState!.pitch != cameraState.pitch);

      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ null
      final lastLng = _lastCameraState!.center.coordinates[0];
      final lastLat = _lastCameraState!.center.coordinates[1];
      final currentLng = cameraState.center.coordinates[0];
      final currentLat = cameraState.center.coordinates[1];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ null –ø–µ—Ä–µ–¥ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º —Ä–∞–∑–Ω–∏—Ü—ã
      double lngDiff = 0.001;
      double latDiff = 0.001;

      if (lastLng != null && currentLng != null) {
        lngDiff = (lastLng - currentLng).abs().toDouble();
      }

      if (lastLat != null && currentLat != null) {
        latDiff = (lastLat - currentLat).abs().toDouble();
      }

      cameraChanged = zoomDiff ||
          bearingDiff ||
          pitchDiff ||
          lngDiff > 0.0000001 ||
          latDiff > 0.0000001;
    }

    _lastCameraState = cameraState;

    // –ï—Å–ª–∏ –∫–∞–º–µ—Ä–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
    if (!cameraChanged) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–∞–º–µ—Ä–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
    setState(() {
      // –ü–æ–∑–∏—Ü–∏–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã –≤ _buildMarkers
    });
  }

  String? _findVideoUrl(Map<dynamic, dynamic> properties) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞, –≥–¥–µ –º–æ–∂–µ—Ç –±—ã—Ç—å URL –≤–∏–¥–µ–æ
    final nestedProperties = properties['properties'] as Map<dynamic, dynamic>?;

    if (_enableDetailedLogs) {
      debugPrint('üé¨ GifMarkerManager: Searching for video URL in properties');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    for (final key in [
      'marker_type',
      'markerType',
      'marker_url',
      'markerUrl',
      'video_url',
      'videoUrl',
      'url'
    ]) {
      final value = properties[key]?.toString();
      if (value != null &&
          (value.endsWith('.webm') || value.endsWith('.gif'))) {
        if (_enableDetailedLogs) {
          debugPrint(
              'üé¨ GifMarkerManager: Found URL in root properties: $key = $value');
        }
        return value;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    if (nestedProperties != null) {
      for (final key in [
        'marker_type',
        'markerType',
        'marker_url',
        'markerUrl',
        'video_url',
        'videoUrl',
        'url'
      ]) {
        final value = nestedProperties[key]?.toString();
        if (value != null &&
            (value.endsWith('.webm') || value.endsWith('.gif'))) {
          if (_enableDetailedLogs) {
            debugPrint(
                'üé¨ GifMarkerManager: Found URL in nested properties: $key = $value');
          }
          return value;
        }
      }
    }

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –ª—é–±—ã—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
    String? searchInObject(dynamic obj, String path) {
      if (obj is String && (obj.endsWith('.webm') || obj.endsWith('.gif'))) {
        if (_enableDetailedLogs) {
          debugPrint('üé¨ GifMarkerManager: Found URL in path $path: $obj');
        }
        return obj;
      } else if (obj is Map) {
        for (final entry in obj.entries) {
          final result = searchInObject(entry.value, '$path.${entry.key}');
          if (result != null) return result;
        }
      } else if (obj is List) {
        for (var i = 0; i < obj.length; i++) {
          final result = searchInObject(obj[i], '$path[$i]');
          if (result != null) return result;
        }
      }
      return null;
    }

    final result = searchInObject(properties, 'root');
    if (result != null) {
      return result;
    }

    if (_enableDetailedLogs) {
      debugPrint('üé¨ GifMarkerManager: No video URL found in properties');
    }
    return null;
  }

  @override
  void didUpdateWidget(GifMarkerManager oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (_enableDetailedLogs) {
      debugPrint('üé¨ GifMarkerManager: didUpdateWidget called');
    }
    if (oldWidget.mapboxMap != widget.mapboxMap) {
      if (_enableDetailedLogs) {
        debugPrint(
            'üé¨ GifMarkerManager: MapboxMap instance changed, reinitializing');
      }
      _styleCheckTimer?.cancel();
      _clearMarkers();
      _isInitialized = false;
      _isInitializing = false;
      _initializationAttempts = 0;
      _scheduleInitialization();
    } else if (!_isInitialized && !_isInitializing) {
      // –ï—Å–ª–∏ –≤–∏–¥–∂–µ—Ç –æ–±–Ω–æ–≤–∏–ª—Å—è, –Ω–æ –º–∞—Ä–∫–µ—Ä—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
      if (_enableDetailedLogs) {
        debugPrint(
            'üé¨ GifMarkerManager: Widget updated but not initialized, trying to initialize');
      }
      _scheduleInitialization();
    }
  }

  void _clearMarkers() {
    if (_enableDetailedLogs) {
      debugPrint(
          'üé¨ GifMarkerManager: Clearing ${_markersById.length} markers');
    }

    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –≤–∏–¥–µ–æ
    for (final markerData in _markersById.values) {
      if (markerData.controller != null) {
        markerData.controller!.dispose();
      }
    }
    _markersById.clear();
  }

  @override
  void dispose() {
    debugPrint('üé¨ GifMarkerManager: dispose called');
    _isDisposed = true;
    WidgetsBinding.instance.removeObserver(this);
    _updateTimer?.cancel();
    _styleCheckTimer?.cancel();
    _clearMarkers();
    // –û—á–∏—â–∞–µ–º –∫—ç—à GIF –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
    GifCache.clear();
    super.dispose();
  }

  Future<void> _createVideoMarker(
      String id, List coordinates, String videoUrl) async {
    if (_isDisposed) return;

    debugPrint(
        'üé¨ GifMarkerManager ‚úÖ: Creating marker $id with URL: $videoUrl');

    try {
      final isGif = videoUrl.toLowerCase().endsWith('.gif');
      VideoPlayerController? controller;

      // –ï—Å–ª–∏ —ç—Ç–æ GIF, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
      if (isGif) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å GIF
          final response = await http.head(Uri.parse(videoUrl));
          if (response.statusCode != 200) {
            debugPrint(
                '‚ùå GifMarkerManager: GIF not available: $videoUrl (status: ${response.statusCode})');
            return;
          }
          debugPrint('‚úÖ GifMarkerManager: GIF is available: $videoUrl');
        } catch (e) {
          debugPrint('‚ùå GifMarkerManager: Error checking GIF availability: $e');
          return;
        }
      }
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ GIF, –∏—Å–ø–æ–ª—å–∑—É–µ–º VideoPlayer
      else {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤–∏–¥–µ–æ
        controller = VideoPlayerController.network(videoUrl);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        bool initialized = false;
        Timer? timeoutTimer;

        timeoutTimer = Timer(const Duration(seconds: 10), () {
          if (!initialized && !_isDisposed) {
            debugPrint(
                '‚ùå GifMarkerManager: Video initialization timeout for $videoUrl');
            controller!.dispose();
          }
        });

        try {
          await controller.initialize();
          initialized = true;
          timeoutTimer.cancel();

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤—Å–µ –µ—â–µ –≤–∞–ª–∏–¥–µ–Ω
          if (_isDisposed || !controller.value.isInitialized) {
            controller.dispose();
            return;
          }

          // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
          await controller.setLooping(true);
          await controller.setVolume(0.0);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
          if (controller.value.duration.inMilliseconds > 0) {
            // –ï—Å–ª–∏ –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –º–æ–∂–Ω–æ —É—Å–∫–æ—Ä–∏—Ç—å –µ–≥–æ
            if (controller.value.duration.inSeconds > 10) {
              await controller.setPlaybackSpeed(1.5);
            }
            if (_enableDetailedLogs) {
              debugPrint(
                  'üé¨ GifMarkerManager: Video duration: ${controller.value.duration.inSeconds}s');
            }
          }

          // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
          await controller.play();
          debugPrint('‚úÖ GifMarkerManager: Video playback started for $id');

          // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
          Timer.periodic(const Duration(seconds: 2), (timer) {
            if (_isDisposed || controller == null || !mounted) {
              timer.cancel();
              return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤—Å–µ –µ—â–µ –≤–∞–ª–∏–¥–µ–Ω
            if (!controller.value.isInitialized) {
              timer.cancel();
              return;
            }

            // –ï—Å–ª–∏ –≤–∏–¥–µ–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
            if (!controller.value.isPlaying) {
              debugPrint(
                  'üîÑ GifMarkerManager: Restarting video playback for $id');
              controller.play();
            }
          });
        } catch (e) {
          debugPrint('‚ùå GifMarkerManager: Failed to initialize video: $e');
          controller.dispose();
          return;
        }

        if (_isDisposed) {
          controller.dispose();
          return;
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä–∞
      setState(() {
        _markersById[id] = _MarkerData(
          controller: controller,
          coordinates: [coordinates[0] as double, coordinates[1] as double],
          isGif: isGif,
          url: videoUrl,
        );
      });

      debugPrint('‚úÖ GifMarkerManager: Successfully created marker $id');
    } catch (e) {
      debugPrint('‚ùå GifMarkerManager: Error creating marker: $e');
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  Future<Offset?> _getScreenPoint(List<double> coordinates) async {
    try {
      final point = mapbox.Point(
        coordinates: mapbox.Position(
          coordinates[0],
          coordinates[1],
        ),
      );

      final screenCoordinate = await widget.mapboxMap.pixelForCoordinate(point);
      return Offset(screenCoordinate.x, screenCoordinate.y);
    } catch (e) {
      if (_enableDetailedLogs) {
        debugPrint('‚ùå GifMarkerManager: Error getting screen point: $e');
      }
      return null;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: _buildCachedMarkers(),
    );
  }

  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  List<Widget> _buildCachedMarkers() {
    final markers = <Widget>[];

    for (final entry in _markersById.entries) {
      markers.add(
        _MarkerWidget(
          key: ValueKey('marker_${entry.key}'),
          mapboxMap: widget.mapboxMap,
          markerData: entry.value,
        ),
      );
    }

    return markers;
  }

  // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
  void forceUpdate() {
    if (_isDisposed) return;
    debugPrint('üé¨ GifMarkerManager: Force update requested');

    // –ï—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –∏–¥–µ—Ç, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é
    if (_isInitializing) {
      debugPrint(
          'üé¨ GifMarkerManager: Initialization already in progress, skipping force update');
      return;
    }

    // –ï—Å–ª–∏ –º–∞—Ä–∫–µ—Ä—ã —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
    if (_isInitialized) {
      debugPrint('üé¨ GifMarkerManager: Updating marker positions and states');

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –º–∞—Ä–∫–µ—Ä–æ–≤
      _updateMarkerPositions();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–µ–æ-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
      for (final entry in _markersById.entries) {
        final markerData = entry.value;
        if (!markerData.isGif && markerData.controller != null) {
          final controller = markerData.controller!;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
          if (controller.value.isInitialized) {
            // –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
            if (!controller.value.isPlaying) {
              debugPrint(
                  'üîÑ GifMarkerManager: Restarting video for marker ${entry.key}');
              controller.play();
            }
          } else {
            debugPrint(
                '‚ö†Ô∏è GifMarkerManager: Controller for marker ${entry.key} is not initialized');
          }
        }
      }

      return;
    }

    // –ï—Å–ª–∏ –º–∞—Ä–∫–µ—Ä—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    reinitialize();
  }
}

// –í—ã–¥–µ–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π StatefulWidget –¥–ª—è –ª—É—á—à–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
class _MarkerWidget extends StatefulWidget {
  final mapbox.MapboxMap mapboxMap;
  final _MarkerData markerData;

  const _MarkerWidget({
    super.key,
    required this.mapboxMap,
    required this.markerData,
  });

  @override
  State<_MarkerWidget> createState() => _MarkerWidgetState();
}

class _MarkerWidgetState extends State<_MarkerWidget>
    with SingleTickerProviderStateMixin {
  Offset? _screenPoint;
  bool _isVisible = false;
  late AnimationController _animationController;
  bool _videoStarted = false;

  @override
  void initState() {
    super.initState();

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ
    _animationController = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 1),
    )..repeat(reverse: false);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    _animationController.addListener(_updatePosition);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é
    _updatePosition();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–¥–µ–æ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    _checkAndStartVideo();
  }

  void _checkAndStartVideo() {
    if (!widget.markerData.isGif &&
        widget.markerData.controller != null &&
        widget.markerData.controller!.value.isInitialized &&
        !_videoStarted) {
      _videoStarted = true;
      widget.markerData.controller!.play().then((_) {
        debugPrint('‚úÖ Video playback started in _MarkerWidget');
      }).catchError((error) {
        debugPrint('‚ùå Error starting video in _MarkerWidget: $error');
      });
    }
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  void didUpdateWidget(_MarkerWidget oldWidget) {
    super.didUpdateWidget(oldWidget);
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    if (oldWidget.markerData.coordinates != widget.markerData.coordinates) {
      _updatePosition();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–¥–µ–æ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–∂–µ—Ç–∞
    _checkAndStartVideo();
  }

  void _updatePosition() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ pixelForCoordinate –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥–µ–æ–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —ç–∫—Ä–∞–Ω–Ω—ã–µ
    widget.mapboxMap
        .pixelForCoordinate(
      mapbox.Point(
        coordinates: mapbox.Position(
          widget.markerData.coordinates[0],
          widget.markerData.coordinates[1],
        ),
      ),
    )
        .then((screenCoordinate) {
      if (mounted) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —ç–∫—Ä–∞–Ω–∞
        final size = MediaQuery.of(context).size;
        final isOnScreen = screenCoordinate.x >= -30 &&
            screenCoordinate.x <= size.width + 30 &&
            screenCoordinate.y >= -30 &&
            screenCoordinate.y <= size.height + 30;

        setState(() {
          _screenPoint = Offset(screenCoordinate.x, screenCoordinate.y);
          _isVisible = isOnScreen;
        });
      }
    }).catchError((_) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    });
  }

  @override
  Widget build(BuildContext context) {
    if (_screenPoint == null || !_isVisible) {
      return const SizedBox.shrink();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–¥–µ–æ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≤–∏–¥–∂–µ—Ç–∞
    _checkAndStartVideo();

    return AnimatedPositioned(
      duration:
          const Duration(milliseconds: 0), // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
      left: _screenPoint!.dx - 15, // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ä (–ø–æ–ª–æ–≤–∏–Ω–∞ —à–∏—Ä–∏–Ω—ã)
      top: _screenPoint!.dy - 15, // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ä (–ø–æ–ª–æ–≤–∏–Ω–∞ –≤—ã—Å–æ—Ç—ã)
      child: RepaintBoundary(
        child: Container(
          width: 30,
          height: 30,
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(8),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.3),
                spreadRadius: 1,
                blurRadius: 5,
                offset: const Offset(0, 2),
              ),
            ],
          ),
          clipBehavior: Clip.antiAlias,
          child: widget.markerData.isGif
              ? LoopingGifWidget(
                  key: ValueKey('gif_${widget.markerData.url}'),
                  url: widget.markerData.url,
                  fit: BoxFit.cover,
                )
              : _buildVideoPlayer(),
        ),
      ),
    );
  }

  Widget _buildVideoPlayer() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (widget.markerData.controller == null) {
      return const Center(
        child: Icon(Icons.error, color: Colors.red, size: 16),
      );
    }

    if (!widget.markerData.controller!.value.isInitialized) {
      return const Center(
        child: SizedBox(
          width: 20,
          height: 20,
          child: CircularProgressIndicator(strokeWidth: 2),
        ),
      );
    }

    return AspectRatio(
      aspectRatio: 1.0,
      child: VideoPlayer(widget.markerData.controller!),
    );
  }
}

class _MarkerData {
  final VideoPlayerController? controller;
  final List<double> coordinates;
  final bool isGif;
  final String url;

  _MarkerData({
    this.controller,
    required this.coordinates,
    this.isGif = false,
    required this.url,
  });
}
