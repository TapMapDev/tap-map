import 'dart:async';
import 'dart:io';
import 'dart:ui' as ui;
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:geolocator/geolocator.dart' as gl;
import 'package:mapbox_maps_flutter/mapbox_maps_flutter.dart' as mp;
import 'package:tap_map/core/di/di.dart';
import 'package:tap_map/core/shared_prefs/shared_prefs_repo.dart';
import 'package:tap_map/src/features/userFlow/map/styles/bloc/map_styles_bloc.dart';
import 'package:tap_map/src/features/userFlow/map/icons/bloc/icons_bloc.dart';
import 'package:tap_map/src/features/userFlow/map/icons/icons_responce_modal.dart';
import 'package:tap_map/src/features/userFlow/map/widgets/map_style_buttons.dart';

class MajorMap extends StatefulWidget {
  const MajorMap({Key? key}) : super(key: key);

  @override
  State<MajorMap> createState() => _MajorMapState();
}

class _MajorMapState extends State<MajorMap> {
  mp.MapboxMap? mapboxMapController;

  /// –ü–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
  gl.Position? _initialUserPosition;

  /// –§–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞—Ü–∏–∏
  bool isLocationLoaded = false;

  /// –§–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Ç–∏–ª—è
  bool isStyleLoaded = false;

  /// –°–ª–æ–≤–∞—Ä—å "–∏–º—è_–∏–∫–æ–Ω–∫–∏ -> —É–∂–µ_–∑–∞–≥—Ä—É–∂–µ–Ω–æ?"
  final Map<String, bool> loadedIcons = {};

  /// –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π styleId
  int? currentStyleId;

  /// –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π styleUri
  late String mapStyleUri;

  @override
  void initState() {
    super.initState();
    _loadSavedMapStyle(); // 1) –ì—Ä—É–∑–∏–º —Å—Ç–∏–ª—å
    _setupPositionTracking(); // 2) –õ–æ–∫–∞—Ü–∏—è
    // 3) –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–ª–µ–π
    Future.microtask(() {
      context.read<MapStyleBloc>().add(FetchMapStylesEvent());
    });
  }

  /// –ì—Ä—É–∑–∏–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å—Ç–∏–ª—å (URL + ID) –∏–∑ SharedPrefs
  Future<void> _loadSavedMapStyle() async {
    final prefs = getIt.get<SharedPrefsRepository>();
    final savedStyle = await prefs.getSavedMapStyle();
    final savedStyleId = await prefs.getMapStyleId();

    setState(() {
      mapStyleUri = savedStyle ?? mp.MapboxStyles.MAPBOX_STREETS;
      currentStyleId = savedStyleId;
      isStyleLoaded = true;
    });

    // –ï—Å–ª–∏ –Ω–∞–¥–æ "–ø—Ä–æ–≥—Ä–µ—Ç—å" –∏–∫–æ–Ω–∫–∏ –∑–∞—Ä–∞–Ω–µ–µ
    if (currentStyleId != null) {
      context.read<IconsBloc>().add(FetchIconsEvent(styleId: currentStyleId!));
    }
  }

  Future<void> _updateTextStyleFromJson(List<Map<String, dynamic>> data) async {
    if (mapboxMapController == null) return;

    for (var item in data) {
      final String textColor =
          item["text_color"] ?? "#FFFFFF"; // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –±–µ–ª—ã–π —Ü–≤–µ—Ç
      final String name = item["name"] ?? "unknown"; // –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏

      final hasLayer = await _checkLayerExists("places_symbol_layer");
      if (!hasLayer) {
        debugPrint(
            "‚ö†Ô∏è Layer places_symbol_layer –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è...");
        await _addSourceAndLayers();
        return;
      }

      try {
        // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –¢–û–õ–¨–ö–û –¥–ª—è –º–µ—Ç–æ–∫ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∏–º–µ–Ω–µ–º
        await mapboxMapController?.style.setStyleLayerProperty(
          "places_symbol_layer",
          "text-color",
          [
            "match",
            ["get", "name"], // –ü–æ–ª–µ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
            name,
            _convertHexToRGBA(textColor), // –¶–≤–µ—Ç –¥–ª—è —Å–æ–≤–ø–∞–¥–∞—é—â–µ–≥–æ name
            // ["rgba", 255, 255, 255, 1.0] // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –±–µ–ª—ã–π
          ],
        );

        debugPrint("‚úÖ –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è $name: $textColor");
      } catch (e, st) {
        debugPrint("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ ($name): $e\n$st");
      }
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–ª–æ—è
  Future<bool> _checkLayerExists(String layerId) async {
    try {
      final result = await mapboxMapController?.style
          .getStyleLayerProperty(layerId, "visibility");
      return result != null;
    } catch (e) {
      return false;
    }
  }

  List<Object> _convertHexToRGBA(String hexColor) {
    hexColor = hexColor.replaceFirst('#', '');
    if (hexColor.length == 6) {
      hexColor = 'FF$hexColor'; // –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª (100% –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å)
    }
    int hexValue = int.parse(hexColor, radix: 16);
    Color color = Color(hexValue);
    return ["rgba", color.red, color.green, color.blue, 1.0];
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HEX –≤ RGBA (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)

  /// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç HEX-—Ü–≤–µ—Ç –≤ Mapbox Expression
  List<Object> _parseColorExpression(String hexColor) {
    return ["literal", hexColor]; // Mapbox –æ–∂–∏–¥–∞–µ—Ç color –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ HEX
  }

  /// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
  Future<void> _setupPositionTracking() async {
    await Future.delayed(Duration(milliseconds: 500));
    final serviceEnabled = await gl.Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) return;

    gl.LocationPermission permission = await gl.Geolocator.checkPermission();
    if (permission == gl.LocationPermission.denied) {
      permission = await gl.Geolocator.requestPermission();
      if (permission == gl.LocationPermission.denied ||
          permission == gl.LocationPermission.deniedForever) {
        return;
      }
    }

    final position = await gl.Geolocator.getCurrentPosition();
    setState(() {
      _initialUserPosition = position;
      isLocationLoaded = true;
    });
  }

  @override
  Widget build(BuildContext context) {
    // –ñ–¥—ë–º, –ø–æ–∫–∞ –∫–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∏ –ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞
    if (!isStyleLoaded || !isLocationLoaded) {
      return const Center(child: CircularProgressIndicator());
    }

    return MultiBlocListener(
      listeners: [
        // –õ–æ–≤–∏–º —Å–æ–±—ã—Ç–∏—è IconsBloc (–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–æ–∫)
        BlocListener<IconsBloc, IconsState>(
          listener: (context, state) async {
            if (state is IconsLoading) {
              debugPrint('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–æ–∫...');
            } else if (state is IconsSuccess) {
              debugPrint('‚úÖ –ò–∫–æ–Ω–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ MapBox...');
              _loadIcons(state.icons, styleId: state.styleId);

              final textColorExpression =
                  buildTextColorExpression(state.textColors);

              try {
                await mapboxMapController?.style.setStyleLayerProperty(
                  "places_symbol_layer",
                  "text-color",
                  textColorExpression,
                );
                debugPrint("‚úÖ –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!");
              } catch (e, st) {
                debugPrint("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞: $e\n$st");
              }
            }
          },
        ),
        // –õ–æ–≤–∏–º —Å–æ–±—ã—Ç–∏—è MapStyleBloc (—Å–º–µ–Ω–∞ —Å—Ç–∏–ª—è)
        BlocListener<MapStyleBloc, MapStyleState>(
          listener: (context, state) async {
            if (state is MapStyleUpdateSuccess) {
              _updateMapStyle(state.styleUri);
              currentStyleId = state.newStyleId;
              await _clearIcons(); // —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –∏–∫–æ–Ω–∫–∏
              context
                  .read<IconsBloc>()
                  .add(FetchIconsEvent(styleId: state.newStyleId));
            }
          },
        ),
      ],
      child: Scaffold(
        body: Stack(
          children: [
            mp.MapWidget(
              styleUri: mapStyleUri,
              cameraOptions: mp.CameraOptions(
                center: _initialUserPosition != null
                    ? mp.Point(
                        coordinates: mp.Position(
                          _initialUserPosition!.longitude,
                          _initialUserPosition!.latitude,
                        ),
                      )
                    : mp.Point(coordinates: mp.Position(98.360473, 7.886778)),
                zoom: 14.0,
              ),
              onMapCreated: _onMapCreated,
              onMapLoadedListener: _onStyleLoadedCallback,

              /// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
              onCameraChangeListener: (eventData) async {
                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–º–µ—Ä—ã
                final cameraState = await mapboxMapController?.getCameraState();
                if (cameraState == null) return;

                final zoom = cameraState.zoom;
                // –°—á–∏—Ç–∞–µ–º threshold
                final threshold = getThresholdByZoom(zoom);

                // –§–æ—Ä–º–∏—Ä—É–µ–º icon-image expression
                final iconExpression = buildIconImageExpression(threshold);

                // –§–æ—Ä–º–∏—Ä—É–µ–º text-field expression
                final textExpression = buildTextFieldExpression(threshold);

                // –û–±–Ω–æ–≤–ª—è–µ–º icon-image
                mapboxMapController?.style.setStyleLayerProperty(
                  "places_symbol_layer",
                  "icon-image",
                  iconExpression,
                );
                // –û–±–Ω–æ–≤–ª—è–µ–º text-field
                mapboxMapController?.style.setStyleLayerProperty(
                  "places_symbol_layer",
                  "text-field",
                  textExpression,
                );
              },
            ),

            // –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
            const Positioned(
              bottom: 80,
              left: 20,
              child: MapStyleButtons(),
            ),

            // –ö–Ω–æ–ø–∫–∞ "—Ü–µ–Ω—Ç—Ä"
            Positioned(
              bottom: 20,
              right: 20,
              child: FloatingActionButton(
                onPressed: _centerOnUserLocation,
                backgroundColor: Colors.white,
                child: const Icon(Icons.my_location, color: Colors.blue),
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// –ö–æ–≥–¥–∞ –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞
  void _onMapCreated(mp.MapboxMap controller) {
    mapboxMapController = controller;

    // –í–∫–ª—é—á–∞–µ–º "—Å–∏–Ω—é—é —Ç–æ—á–∫—É"
    mapboxMapController?.location.updateSettings(
      mp.LocationComponentSettings(enabled: true, pulsingEnabled: true),
    );
  }

  /// –ö–æ–≥–¥–∞ —Å—Ç–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω
  Future<void> _onStyleLoadedCallback(mp.MapLoadedEventData data) async {
    if (mapboxMapController == null) return;
    debugPrint("üó∫Ô∏è –°—Ç–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω! –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–∏...");
    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Å–ª–æ–π
    await _addSourceAndLayers();
    // –ó–∞–≥—Ä—É–∂–∞–µ–º my_dot_icon
    await _loadMyDotIconFromUrl();

    // –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º icon-image –∏ text-field
    final camState = await mapboxMapController?.getCameraState();
    final currentZoom = camState?.zoom ?? 14.0;
    final threshold = getThresholdByZoom(currentZoom);

    final iconExpr = buildIconImageExpression(threshold);
    final textExpr = buildTextFieldExpression(threshold);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
    mapboxMapController?.style.setStyleLayerProperty(
      "places_symbol_layer",
      "icon-image",
      iconExpr,
    );
    mapboxMapController?.style.setStyleLayerProperty(
      "places_symbol_layer",
      "text-field",
      textExpr,
    );

    // –ï—Å–ª–∏ –µ—Å—Ç—å styleId -> –≥—Ä—É–∑–∏–º –∏–∫–æ–Ω–∫–∏
    if (currentStyleId != null) {
      context.read<IconsBloc>().add(FetchIconsEvent(styleId: currentStyleId!));
    }
  }

  List<Object> buildTextColorExpression(Map<String, String> textColors) {
    List<Object> matchExpression = [
      "match",
      ["get", "subcategory"], // –ë–µ—Ä—ë–º –∑–Ω–∞—á–µ–Ω–∏–µ subcategory
    ];

    textColors.forEach((subcategory, color) {
      matchExpression.add(subcategory);
      matchExpression.add(_convertHexToRGBA(color)); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HEX –≤ RGBA
    });

    matchExpression
        .add(["rgba", 255, 255, 255, 1.0]); // –ë–µ–ª—ã–π —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    return matchExpression;
  }

  /// –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ + SymbolLayer (–∑–∞–≥–ª—É—à–∫–∞)
  Future<void> _addSourceAndLayers() async {
    await mapboxMapController?.style.addSource(
      mp.VectorSource(
        id: "places_source",
        tiles: ["https://map-travel.net/tilesets/data/tiles/{z}/{x}/{y}.pbf"],
        minzoom: 0,
        maxzoom: 20,
      ),
    );

    // –õ–æ–≥–∏–∫–∞ icon-image / text-field —Ç–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏,
    // —Ç–∞–∫ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞—ë–º –∑–∞–≥–ª—É—à–∫—É
    await mapboxMapController?.style.addLayer(
      mp.SymbolLayer(
        id: "places_symbol_layer",
        sourceId: "places_source",
        sourceLayer: "mylayer",

        iconImage: "my_dot_icon", // –ó–∞–≥–ª—É—à–∫–∞
        iconSize: 0.3,
        iconAllowOverlap: true,
        iconIgnorePlacement: true,

        // –¢–æ–∂–µ –∑–∞–≥–ª—É—à–∫–∞
        textField: "",
        textFont: ["DIN Offc Pro Medium"],
        textSizeExpression: <Object>[
          "interpolate",
          ["linear"],
          ["zoom"],
          5, 3, // –ü—Ä–∏ –∑—É–º–µ 5, —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ 3
          18, 14 // –ü—Ä–∏ –∑—É–º–µ 18, —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ 14
        ],
        textOffsetExpression: <Object>[
          'interpolate',
          ['linear'],
          ['zoom'],
          5,
          [
            'literal',
            // [0, 1.0]
            [0, 1.85]
          ],
          18,
          [
            'literal',
            [0, 0.75]
            // [0, 1.55]
          ]
        ],
        textAnchor: mp.TextAnchor.TOP,
        textColor: Colors.white.value,
        textHaloColor: Colors.black.withOpacity(0.75).value,
        textHaloWidth: 2.0,
        textHaloBlur: 0.5,
      ),
    );
  }

  /// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∫–æ–Ω–∫–∏
  Future<void> _clearIcons() async {
    if (mapboxMapController == null) return;
    debugPrint('üîÑ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∫–æ–Ω–∫–∏...');
    for (final iconKey in loadedIcons.keys) {
      await mapboxMapController?.style.removeStyleImage(iconKey);
    }
    loadedIcons.clear();
    debugPrint('‚úÖ –í—Å–µ —Å—Ç–∞—Ä—ã–µ –∏–∫–æ–Ω–∫–∏ —É–¥–∞–ª–µ–Ω—ã!');
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫–∏ –∏–∑ API
  Future<void> _loadIcons(
    List<IconsResponseModel> icons, {
    required int styleId,
  }) async {
    if (mapboxMapController == null) return;

    debugPrint('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º ${icons.length} –∏–∫–æ–Ω–æ–∫ –¥–ª—è styleId=$styleId...');
    final tasks = <Future<void>>[];
    for (final icon in icons) {
      final iconName = icon.name;
      final iconUrl = icon.logo.logoUrl;
      if (loadedIcons.containsKey(iconName)) {
        debugPrint('‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ $iconName —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        continue;
      }
      tasks.add(_loadSingleIcon(iconName, iconUrl, styleId));
    }
    await Future.wait(tasks);
    debugPrint('‚úÖ –í—Å–µ –∏–∫–æ–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è styleId=$styleId!');
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ–º my_dot_icon
  Future<void> _loadMyDotIconFromUrl() async {
    if (mapboxMapController == null) return;
    try {
      const iconUrl =
          "https://tap-maptravel.s3.ap-southeast-2.amazonaws.com/media/svgs/circle/%D0%9A%D1%80%D1%83%D0%B3_rdr.png";
      final downloaded = await NetworkAssetManager().downloadImage(iconUrl);
      if (downloaded == null || downloaded.isEmpty) return;

      final ui.Codec codec = await ui.instantiateImageCodec(downloaded);
      final ui.FrameInfo frameInfo = await codec.getNextFrame();
      final ui.Image decodedImage = frameInfo.image;

      final byteData =
          await decodedImage.toByteData(format: ui.ImageByteFormat.png);
      if (byteData == null) return;

      final Uint8List pngBytes = byteData.buffer.asUint8List();
      final mp.MbxImage mbxImage = mp.MbxImage(
        width: decodedImage.width,
        height: decodedImage.height,
        data: pngBytes,
      );
      await mapboxMapController?.style.addStyleImage(
        "my_dot_icon",
        1.0,
        mbxImage,
        false,
        [],
        [],
        null,
      );
      debugPrint('‚úÖ my_dot_icon –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!');
    } catch (e, st) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ my_dot_icon: $e\n$st');
    }
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–¥–Ω—É –∏–∫–æ–Ω–∫—É (API)
  Future<void> _loadSingleIcon(String iconName, String url, int styleId) async {
    if (mapboxMapController == null) return;
    try {
      final compositeKey = '$styleId-$iconName';
      final prefs = getIt.get<SharedPrefsRepository>();
      final cached = await prefs.getIconBytes(compositeKey);
      Uint8List? finalBytes;

      if (cached != null && cached.isNotEmpty) {
        finalBytes = cached;
        debugPrint('üíæ –ò–∫–æ–Ω–∫–∞ $iconName –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ');
      } else {
        final downloaded = await NetworkAssetManager().downloadImage(url);
        if (downloaded == null || downloaded.isEmpty) return;
        finalBytes = downloaded;
        await prefs.saveIconBytes(compositeKey, downloaded);
      }

      final ui.Codec codec = await ui.instantiateImageCodec(finalBytes);
      final ui.FrameInfo frameInfo = await codec.getNextFrame();
      final ui.Image decodedImage = frameInfo.image;

      final byteData =
          await decodedImage.toByteData(format: ui.ImageByteFormat.png);
      if (byteData == null) return;

      final Uint8List pngBytes = byteData.buffer.asUint8List();
      final mp.MbxImage mbxImage = mp.MbxImage(
        width: decodedImage.width,
        height: decodedImage.height,
        data: pngBytes,
      );
      await mapboxMapController?.style.addStyleImage(
        iconName,
        1.0,
        mbxImage,
        false,
        [],
        [],
        null,
      );
      loadedIcons[iconName] = true;
      debugPrint('‚úÖ –ò–∫–æ–Ω–∫–∞ $iconName –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
    } catch (e, st) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤ _loadSingleIcon($iconName): $e\n$st');
    }
  }

  /// –°–º–µ–Ω–∞ —Å—Ç–∏–ª—è
  Future<void> _updateMapStyle(String newStyle) async {
    if (mapboxMapController == null) return;
    debugPrint("üîÑ –ú–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫–∞—Ä—Ç—ã –Ω–∞: $newStyle...");
    await mapboxMapController!.style.setStyleURI(newStyle);

    Future.delayed(const Duration(milliseconds: 500), () async {
      if (mapboxMapController != null) {
        debugPrint("‚úÖ –ù–æ–≤—ã–π —Å—Ç–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω! –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏...");
        await _addSourceAndLayers();
      }
    });
    getIt.get<SharedPrefsRepository>().saveMapStyle(newStyle);
  }

  /// –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º—Å—è –Ω–∞ —é–∑–µ—Ä–µ
  Future<void> _centerOnUserLocation() async {
    gl.LocationPermission permission = await gl.Geolocator.checkPermission();
    if (permission == gl.LocationPermission.denied ||
        permission == gl.LocationPermission.deniedForever) {
      permission = await gl.Geolocator.requestPermission();
      if (permission == gl.LocationPermission.denied) {
        return;
      }
    }
    final position = await gl.Geolocator.getCurrentPosition();
    _moveCameraToPosition(position);
  }

  void _moveCameraToPosition(gl.Position position) {
    mapboxMapController?.setCamera(
      mp.CameraOptions(
        zoom: 14,
        center: mp.Point(
          coordinates: mp.Position(position.longitude, position.latitude),
        ),
      ),
    );
  }

  /// –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ threshold –ø–æ z—É–º—É (–∫–∞–∫ –≤ JS)
  double getThresholdByZoom(double zoom) {
    if (zoom < 6.0)
      return 3050;
    else if (zoom < 7.0)
      return 2850;
    else if (zoom < 7.5)
      return 2550;
    else if (zoom < 8.0)
      return 2350;
    else if (zoom < 8.5)
      return 2050;
    else if (zoom < 9.0)
      return 1850;
    else if (zoom < 9.5)
      return 1500;
    else if (zoom < 10.0)
      return 1200;
    else if (zoom < 10.5)
      return 1000;
    else if (zoom < 11.0)
      return 700;
    else if (zoom < 11.5)
      return 550;
    else if (zoom < 12.0)
      return 450;
    else if (zoom < 12.5)
      return 400;
    else if (zoom < 13.0)
      return 300;
    else if (zoom < 13.5)
      return 250;
    else if (zoom < 14.0)
      return 200;
    else if (zoom < 14.5)
      return 100;
    else if (zoom < 15.0)
      return 75;
    else if (zoom < 15.5)
      return 50;
    else if (zoom < 16.0)
      return 30;
    else if (zoom < 16.5)
      return 15;
    else if (zoom < 17.0)
      return 12;
    else if (zoom < 17.5)
      return 9;
    else if (zoom < 18.0)
      return 6;
    else if (zoom < 18.5)
      return 4;
    else if (zoom < 19.0)
      return 2;
    else
      return 0;
  }

  /// –ò–∫–æ–Ω–∫–∞: –µ—Å–ª–∏ min_dist < threshold => my_dot_icon, –∏–Ω–∞—á–µ subcategory
  List<Object> buildIconImageExpression(double threshold) {
    return [
      "let",
      "myThreshold",
      threshold,
      [
        "case",
        [
          "<",
          [
            "to-number",
            [
              "coalesce",
              ["get", "min_dist"],
              0
            ]
          ],
          ["var", "myThreshold"]
        ],
        "my_dot_icon",
        ["get", "subcategory"]
      ]
    ];
  }

  /// –¢–µ–∫—Å—Ç: –µ—Å–ª–∏ min_dist < threshold => "" (–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞), –∏–Ω–∞—á–µ => name
  List<Object> buildTextFieldExpression(double threshold) {
    return [
      "let",
      "myThreshold",
      threshold,
      [
        "case",
        [
          "<",
          [
            "to-number",
            [
              "coalesce",
              ["get", "min_dist"],
              0
            ]
          ],
          ["var", "myThreshold"]
        ],
        "",
        ["get", "name"]
      ]
    ];
  }
}

/// –ö–ª–∞—Å—Å —É—Ç–∏–ª–∏—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
class NetworkAssetManager {
  Future<Uint8List?> downloadImage(String imageUrl) async {
    try {
      final uri = Uri.parse(imageUrl);
      debugPrint('‚¨áÔ∏è Downloading $uri');

      final httpClient = HttpClient();
      final request = await httpClient.getUrl(uri);
      final response = await request.close();
      if (response.statusCode != 200) {
        throw Exception('HTTP error: ${response.statusCode}');
      }
      final bytes = await consolidateHttpClientResponseBytes(response);
      debugPrint('‚úÖ Got ${bytes.length} bytes from $uri');
      return bytes;
    } catch (e, st) {
      debugPrint('‚ùå Error: $e\n$st');
      return null;
    }
  }
}
