import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'dart:ui' as ui;

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:geolocator/geolocator.dart' as gl;
import 'package:mapbox_maps_flutter/mapbox_maps_flutter.dart' as mp;
import 'package:tap_map/core/di/di.dart';
import 'package:tap_map/core/shared_prefs/shared_prefs_repo.dart';
import 'package:tap_map/src/features/userFlow/map/icons/bloc/icons_bloc.dart';
import 'package:tap_map/src/features/userFlow/map/icons/icons_responce_modal.dart';
import 'package:tap_map/src/features/userFlow/map/styles/bloc/map_styles_bloc.dart';
import 'package:tap_map/src/features/userFlow/map/widgets/geo_location.dart';
import 'package:tap_map/src/features/userFlow/map/widgets/gif_marker_manager.dart';
import 'package:tap_map/src/features/userFlow/map/widgets/location_service.dart';
import 'package:tap_map/src/features/userFlow/map/widgets/map_style_buttons.dart';

class MajorMap extends StatefulWidget {
  const MajorMap({super.key});

  @override
  State<MajorMap> createState() => _MajorMapState();
}

class _MajorMapState extends State<MajorMap> {
  mp.MapboxMap? mapboxMapController;
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –¥–ª—è ID —Å–ª–æ—è
  static const String placesLayerId = "places_symbol_layer";
  GifMarkerManager? _gifMarkerManager;

  /// –ü–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
  gl.Position? _initialUserPosition;

  /// –§–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞—Ü–∏–∏
  bool isLocationLoaded = false;

  /// –§–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Ç–∏–ª—è
  bool isStyleLoaded = false;

  /// –°–ª–æ–≤–∞—Ä—å "–∏–º—è_–∏–∫–æ–Ω–∫–∏ -> —É–∂–µ_–∑–∞–≥—Ä—É–∂–µ–Ω–æ?"
  final Map<String, bool> loadedIcons = {};

  /// –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π styleId
  int? currentStyleId;

  /// –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π styleUri
  late String mapStyleUri;

  bool _isDisposed = false; // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞

  @override
  void initState() {
    super.initState();
    _loadSavedMapStyle(); // 1) –ì—Ä—É–∑–∏–º —Å—Ç–∏–ª—å
    Future.delayed(const Duration(milliseconds: 500)).then((_) async {
      final position = await LocationService.getUserPosition();
      if (position != null && mounted) {
        setState(() {
          _initialUserPosition = position;
          isLocationLoaded = true;
        });
      }
    });
    // 3) –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–ª–µ–π
    Future.microtask(() {
      context.read<MapStyleBloc>().add(FetchMapStylesEvent());
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ –º–∏–Ω—É—Ç—ã
    Timer.periodic(const Duration(seconds: 30), (_) {
      if (mounted && mapboxMapController != null) {
        updateOpenCloseStates();
      }
    });
  }

  @override
  void dispose() {
    _isDisposed = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
    super.dispose();
  }

  /// –ì—Ä—É–∑–∏–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å—Ç–∏–ª—å (URL + ID) –∏–∑ SharedPrefs
  Future<void> _loadSavedMapStyle() async {
    final prefs = getIt.get<SharedPrefsRepository>();
    final savedStyle = await prefs.getSavedMapStyle();
    final savedStyleId = await prefs.getMapStyleId();

    setState(() {
      mapStyleUri = savedStyle ?? mp.MapboxStyles.MAPBOX_STREETS;
      currentStyleId = savedStyleId;
      isStyleLoaded = true;
    });

    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫–∏ –∑–∞—Ä–∞–Ω–µ–µ
    if (currentStyleId != null) {
      context.read<IconsBloc>().add(FetchIconsEvent(styleId: currentStyleId!));
    }
  }

  List<Object> _convertHexToRGBA(String hexColor) {
    hexColor = hexColor.replaceFirst('#', '');
    if (hexColor.length == 6) {
      hexColor = 'FF$hexColor';
    }
    int hexValue = int.parse(hexColor, radix: 16);
    Color color = Color(hexValue);
    return ["rgba", color.red, color.green, color.blue, 1.0];
  }

  @override
  Widget build(BuildContext context) {
    if (!isStyleLoaded || !isLocationLoaded) {
      return const Center(child: CircularProgressIndicator());
    }

    return MultiBlocListener(
      listeners: [
        BlocListener<IconsBloc, IconsState>(
          listener: (context, state) async {
            if (_isDisposed) return;
            if (state is IconsLoading) {
              debugPrint('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–æ–∫...');
            } else if (state is IconsSuccess) {
              debugPrint('‚úÖ –ò–∫–æ–Ω–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ MapBox...');
              await _loadIcons(state.icons, styleId: state.styleId);

              if (_isDisposed) return;
              final textColorExpression =
                  buildTextColorExpression(state.textColors);
              try {
                await mapboxMapController?.style.setStyleLayerProperty(
                  placesLayerId,
                  "text-color",
                  textColorExpression,
                );
                debugPrint("‚úÖ –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!");
              } catch (e, st) {
                debugPrint("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞: $e\n$st");
              }
            }
          },
        ),
        BlocListener<MapStyleBloc, MapStyleState>(
          listener: (context, state) async {
            if (state is MapStyleUpdateSuccess) {
              await _updateMapStyle(state.styleUri);
              currentStyleId = state.newStyleId;
              await _clearIcons();

              Future.delayed(const Duration(milliseconds: 500), () {
                context.read<MapStyleBloc>().add(ResetMapStyleEvent());
              });
              context
                  .read<IconsBloc>()
                  .add(FetchIconsEvent(styleId: state.newStyleId));
            }
          },
        ),
      ],
      child: Scaffold(
        body: Stack(
          children: [
            mp.MapWidget(
              styleUri: mapStyleUri,
              cameraOptions: mp.CameraOptions(
                center: _initialUserPosition != null
                    ? mp.Point(
                        coordinates: mp.Position(
                          _initialUserPosition!.longitude,
                          _initialUserPosition!.latitude,
                        ),
                      )
                    : mp.Point(coordinates: mp.Position(98.360473, 7.886778)),
                zoom: 14.0,
              ),
              onMapCreated: _onMapCreated,
              onMapLoadedListener: _onStyleLoadedCallback,
              onCameraChangeListener: (eventData) async {
                if (_isDisposed) return;
                final cameraState = await mapboxMapController?.getCameraState();
                if (cameraState == null) return;

                final zoom = cameraState.zoom;
                final threshold = getThresholdByZoom(zoom);
                final iconExpression = buildIconImageExpression(threshold);
                final textExpression = buildTextFieldExpression(threshold);

                if (_isDisposed) return;
                final layers =
                    await mapboxMapController!.style.getStyleLayers();
                final layerExists =
                    layers.any((layer) => layer?.id == placesLayerId);
                if (!layerExists) {
                  debugPrint(
                      "–°–ª–æ–π $placesLayerId –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.");
                  return;
                }

                if (_isDisposed) return;
                try {
                  await mapboxMapController?.style.setStyleLayerProperty(
                    placesLayerId,
                    "icon-image",
                    iconExpression,
                  );
                } catch (e, st) {
                  debugPrint("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è icon-image: $e\n$st");
                }

                if (_isDisposed) return;
                try {
                  await mapboxMapController?.style.setStyleLayerProperty(
                    placesLayerId,
                    "text-field",
                    textExpression,
                  );
                } catch (e, st) {
                  debugPrint("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è text-field: $e\n$st");
                }
              },
            ),
            if (mapboxMapController != null)
              GifMarkerManager(mapboxMap: mapboxMapController!),
            const Positioned(
              top: 30,
              right: 13,
              child: MapStyleButton(),
            ),
            if (mapboxMapController != null)
              Positioned(
                bottom: 14,
                right: 13,
                child:
                    GeoLocationButton(mapboxMapController: mapboxMapController),
              ),
          ],
        ),
      ),
    );
  }

  void _onMapCreated(mp.MapboxMap controller) {
    setState(() {
      mapboxMapController = controller;
    });
    mapboxMapController?.location.updateSettings(
      mp.LocationComponentSettings(enabled: true, pulsingEnabled: true),
    );
    mapboxMapController?.scaleBar.updateSettings(
      mp.ScaleBarSettings(enabled: false),
    );
    mapboxMapController?.compass.updateSettings(
      mp.CompassSettings(enabled: false),
    );
    mapboxMapController?.attribution.updateSettings(
      mp.AttributionSettings(enabled: false),
    );
  }

  Future<void> _onStyleLoadedCallback(mp.MapLoadedEventData data) async {
    if (mapboxMapController == null || _isDisposed) return;
    debugPrint("üó∫Ô∏è –°—Ç–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω! –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–∏...");
    await _loadMyDotIconFromUrl();
    await _addSourceAndLayers();

    if (_isDisposed) return;
    final styleLayers = await mapboxMapController?.style.getStyleLayers();
    final layerExists =
        styleLayers?.any((layer) => layer?.id == placesLayerId) ?? false;
    if (!layerExists) {
      debugPrint("–°–ª–æ–π $placesLayerId –Ω–µ –ø–æ—è–≤–∏–ª—Å—è!");
      return;
    }

    if (_isDisposed) return;
    await updateOpenCloseStates();

    if (_isDisposed) return;
    Future.delayed(const Duration(milliseconds: 500), () {
      if (mounted && mapboxMapController != null && !_isDisposed) {
        updateOpenCloseStates();
      }
    });

    if (_isDisposed) return;
    final camState = await mapboxMapController?.getCameraState();
    final currentZoom = camState?.zoom ?? 14.0;
    final threshold = getThresholdByZoom(currentZoom);
    final iconExpr = buildIconImageExpression(threshold);
    final textExpr = buildTextFieldExpression(threshold);

    if (_isDisposed) return;
    try {
      await mapboxMapController?.style.setStyleLayerProperty(
        placesLayerId,
        "icon-image",
        iconExpr,
      );
    } catch (e, st) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ icon-image: $e\n$st");
    }

    if (_isDisposed) return;
    try {
      await mapboxMapController?.style.setStyleLayerProperty(
        placesLayerId,
        "text-field",
        textExpr,
      );
    } catch (e, st) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ text-field: $e\n$st");
    }

    if (_isDisposed) return;
    if (currentStyleId != null) {
      context.read<IconsBloc>().add(FetchIconsEvent(styleId: currentStyleId!));
    }
  }

  List<Object> buildTextColorExpression(Map<String, String> textColors) {
    List<Object> matchExpression = [
      "match",
      ["get", "subcategory"],
    ];

    textColors.forEach((subcategory, color) {
      matchExpression.add(subcategory);
      matchExpression.add(_convertHexToRGBA(color));
    });
    matchExpression.add(["rgba", 255, 255, 255, 1.0]);
    return matchExpression;
  }

  /// –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ SymbolLayer, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
  Future<void> _addSourceAndLayers() async {
    if (mapboxMapController == null) return;
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
      final sources = await mapboxMapController!.style.getStyleSources();
      final layers = await mapboxMapController!.style.getStyleLayers();

      debugPrint("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–∞—Ä—Ç—ã:");
      for (var source in sources) {
        if (source != null) {
          debugPrint("  - ID: ${source.id}, Type: ${source.type}");
        }
      }

      final sourceExists =
          sources.any((source) => source?.id == "places_source");

      if (!sourceExists) {
        debugPrint("üîÑ –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ places_source...");
        final vectorSource = mp.VectorSource(
          id: "places_source",
          tiles: ["https://map-travel.net/tilesets/data/tiles/{z}/{x}/{y}.pbf"],
          minzoom: 0,
          maxzoom: 20,
        );

        // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        debugPrint("  - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è places_source:");
        debugPrint(
            "  - URL —Ç–∞–π–ª–æ–≤: https://map-travel.net/tilesets/data/tiles/{z}/{x}/{y}.pbf");
        debugPrint("  - MinZoom: 0");
        debugPrint("  - MaxZoom: 20");

        await mapboxMapController?.style.addSource(vectorSource);
        debugPrint("‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ places_source –¥–æ–±–∞–≤–ª–µ–Ω");
      } else {
        debugPrint("‚ÑπÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫ places_source —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–∞–π–ª–æ–≤
      debugPrint("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–∞–π–ª–æ–≤...");
      final source = sources.firstWhere(
        (source) => source?.id == "places_source",
        orElse: () => null,
      );
      if (source != null) {
        debugPrint("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ places_source:");
        debugPrint("  - ID: ${source.id}");
        debugPrint("  - Type: ${source.type}");
        if (source is mp.VectorSource) {
          debugPrint("  - Tiles: ${(source as mp.VectorSource).tiles}");
          debugPrint("  - MinZoom: ${(source as mp.VectorSource).minzoom}");
          debugPrint("  - MaxZoom: ${(source as mp.VectorSource).maxzoom}");
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –≤–∏–¥–µ–æ-–º–∞—Ä–∫–µ—Ä–æ–≤
      final videoSourceExists =
          sources.any((source) => source?.id == "video_markers_source");
      if (!videoSourceExists) {
        await mapboxMapController?.style.addSource(
          mp.GeoJsonSource(
            id: "video_markers_source",
            data: jsonEncode({"type": "FeatureCollection", "features": []}),
          ),
        );
        debugPrint("‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ video_markers_source –¥–æ–±–∞–≤–ª–µ–Ω");
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–ª–æ—è –¥–ª—è –≤–∏–¥–µ–æ
      final videoLayerExists =
          layers.any((layer) => layer?.id == "video_markers_layer");
      if (!videoLayerExists) {
        await mapboxMapController?.style.addLayer(
          mp.SymbolLayer(
            id: "video_markers_layer",
            sourceId: "video_markers_source",
            minZoom: 0,
            maxZoom: 22,
            iconAllowOverlap: true,
            iconIgnorePlacement: true,
            symbolSortKey: 1, // –†–∞–∑–º–µ—â–∞–µ–º –ø–æ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º —Å–ª–æ–µ–º
          ),
        );
        debugPrint("‚úÖ –°–ª–æ–π video_markers_layer –¥–æ–±–∞–≤–ª–µ–Ω");
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ª–æ—è
      final layerExists = layers.any((layer) => layer?.id == placesLayerId);

      if (!layerExists) {
        await mapboxMapController?.style.addLayer(
          mp.SymbolLayer(
            id: placesLayerId,
            sourceId: "places_source",
            sourceLayer: "mylayer",
            iconImageExpression: <Object>[
              "let",
              "myThreshold",
              500,
              [
                "case",
                [
                  "<",
                  [
                    "to-number",
                    [
                      "coalesce",
                      ["get", "min_dist"],
                      0
                    ]
                  ],
                  ["var", "myThreshold"]
                ],
                "my_dot_icon",
                ["get", "subcategory"]
              ]
            ],
            iconSize: 0.3,
            iconAllowOverlap: true,
            textAllowOverlap: false,
            textOptional: true,
            textFont: ["DIN Offc Pro Medium"],
            textSizeExpression: <Object>[
              "interpolate",
              ["linear"],
              ["zoom"],
              5,
              3,
              18,
              14
            ],
            textOffsetExpression: <Object>[
              'interpolate',
              ['linear'],
              ['zoom'],
              5,
              [
                'literal',
                [0, 1.85]
              ],
              18,
              [
                'literal',
                [0, 0.75]
              ]
            ],
            textAnchor: mp.TextAnchor.TOP,
            textColor: Colors.white.value,
            textHaloColor: Colors.black.withOpacity(0.75).value,
            textHaloWidth: 2.0,
            textHaloBlur: 0.5,
            symbolSortKey: 2, // –†–∞–∑–º–µ—â–∞–µ–º –Ω–∞–¥ —Å–ª–æ–µ–º –≤–∏–¥–µ–æ
          ),
        );
        debugPrint("‚úÖ –°–ª–æ–π $placesLayerId –¥–æ–±–∞–≤–ª–µ–Ω");
      } else {
        debugPrint("‚ÑπÔ∏è –°–ª–æ–π $placesLayerId —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–≤—è–∑–∞–Ω —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
      final layer = layers.firstWhere(
        (layer) => layer?.id == placesLayerId,
        orElse: () => null,
      );
      if (layer != null) {
        debugPrint("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ–µ $placesLayerId:");
        if (layer is mp.SymbolLayer) {
          debugPrint("  - Source ID: ${(layer as mp.SymbolLayer).sourceId}");
          debugPrint(
              "  - Source Layer: ${(layer as mp.SymbolLayer).sourceLayer}");
        }
      }
    } catch (e, st) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ —Å–ª–æ—è: $e\n$st");
    }
  }

  Future<void> _clearIcons() async {
    if (mapboxMapController == null) return;
    debugPrint('üîÑ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∫–æ–Ω–∫–∏...');
    for (final iconKey in loadedIcons.keys) {
      try {
        await mapboxMapController?.style.removeStyleImage(iconKey);
      } catch (e) {
        debugPrint("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ $iconKey: $e");
      }
    }
    loadedIcons.clear();
    debugPrint('‚úÖ –í—Å–µ —Å—Ç–∞—Ä—ã–µ –∏–∫–æ–Ω–∫–∏ —É–¥–∞–ª–µ–Ω—ã!');
  }

  Future<void> _loadIcons(List<IconsResponseModel> icons,
      {required int styleId}) async {
    debugPrint('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º ${icons.length} –∏–∫–æ–Ω–æ–∫ –¥–ª—è styleId=$styleId...');
    final tasks = <Future<void>>[];

    // –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π opacity
    if (mapboxMapController != null) {
      try {
        await mapboxMapController?.style.setStyleLayerProperty(
          placesLayerId,
          'icon-opacity',
          buildIconOpacityExpression(),
        );
        debugPrint('‚úÖ –ë–∞–∑–æ–≤—ã–π opacity —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      } catch (e) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–∞–∑–æ–≤–æ–≥–æ opacity: $e');
      }
    }

    for (final icon in icons) {
      final iconName = icon.name;
      final iconUrl = icon.logo.logoUrl;
      if (loadedIcons.containsKey(iconName)) {
        // debugPrint('‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ $iconName —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        continue;
      }
      tasks.add(_loadSingleIcon(iconName, iconUrl, styleId));
    }

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∏–∫–æ–Ω–æ–∫
    await Future.wait(tasks);
    debugPrint('‚úÖ –í—Å–µ –∏–∫–æ–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è styleId=$styleId!');
  }

  Future<void> _loadMyDotIconFromUrl() async {
    if (mapboxMapController == null) return;
    try {
      const iconUrl =
          "https://tap-maptravel.s3.ap-southeast-2.amazonaws.com/media/svgs/circle/%D0%9A%D1%80%D1%83%D0%B3_rdr.png";
      final downloaded = await NetworkAssetManager().downloadImage(iconUrl);
      if (downloaded == null || downloaded.isEmpty) return;
      final ui.Codec codec = await ui.instantiateImageCodec(downloaded);
      final ui.FrameInfo frameInfo = await codec.getNextFrame();
      final ui.Image decodedImage = frameInfo.image;
      final byteData =
          await decodedImage.toByteData(format: ui.ImageByteFormat.png);
      if (byteData == null) return;
      final Uint8List pngBytes = byteData.buffer.asUint8List();
      final mp.MbxImage mbxImage = mp.MbxImage(
        width: decodedImage.width,
        height: decodedImage.height,
        data: pngBytes,
      );
      await mapboxMapController?.style.addStyleImage(
        "my_dot_icon",
        1.0,
        mbxImage,
        false,
        [],
        [],
        null,
      );
      debugPrint('‚úÖ my_dot_icon –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!');
    } catch (e, st) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ my_dot_icon: $e\n$st');
    }
  }

  Future<void> _loadSingleIcon(String iconName, String url, int styleId) async {
    if (mapboxMapController == null) return;

    final compositeKey = '$styleId-$iconName';
    final prefs = getIt.get<SharedPrefsRepository>();
    final cached = await prefs.getIconBytes(compositeKey);
    Uint8List? finalBytes;

    if (cached != null && cached.isNotEmpty) {
      finalBytes = cached;
      // debugPrint('üíæ –ò–∫–æ–Ω–∫–∞ $iconName –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ');
    } else {
      final downloaded = await NetworkAssetManager().downloadImage(url);
      if (downloaded == null || downloaded.isEmpty) return;
      finalBytes = downloaded;
      await prefs.saveIconBytes(compositeKey, downloaded);
    }

    final ui.Codec codec = await ui.instantiateImageCodec(finalBytes);
    final ui.FrameInfo frameInfo = await codec.getNextFrame();
    final ui.Image decodedImage = frameInfo.image;
    final byteData =
        await decodedImage.toByteData(format: ui.ImageByteFormat.png);
    if (byteData == null) return;
    final Uint8List pngBytes = byteData.buffer.asUint8List();
    final mp.MbxImage mbxImage = mp.MbxImage(
      width: decodedImage.width,
      height: decodedImage.height,
      data: pngBytes,
    );
    await mapboxMapController?.style.addStyleImage(
      iconName,
      1.0,
      mbxImage,
      false,
      [],
      [],
      null,
    );
    loadedIcons[iconName] = true;
  }

  Future<void> _updateMapStyle(String newStyle) async {
    if (mapboxMapController == null) return;

    await mapboxMapController!.style.setStyleURI(newStyle);
    await Future.delayed(const Duration(milliseconds: 300));
    await mapboxMapController?.location.updateSettings(
      mp.LocationComponentSettings(enabled: false),
    );
    await _addSourceAndLayers();
    await updateOpenCloseStates();
    await Future.delayed(const Duration(milliseconds: 300));
    await mapboxMapController?.location.updateSettings(
      mp.LocationComponentSettings(enabled: true, pulsingEnabled: true),
    );
    getIt.get<SharedPrefsRepository>().saveMapStyle(newStyle);
  }

  int _parseTime(String time) {
    final parts = time.split(':').map(int.parse).toList();
    return parts[0] * 60 + parts[1];
  }

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
  bool isPointClosedNow(String? workingHoursRaw, DateTime now) {
    if (workingHoursRaw == null || workingHoursRaw.isEmpty) return false;

    try {
      final workingHours = jsonDecode(workingHoursRaw) as Map<String, dynamic>;
      final dayOfWeek = now.weekday % 7; // 0=Monday, 6=Sunday (–∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫ JS)
      final days = [
        'sunday',
        'monday',
        'tuesday',
        'wednesday',
        'thursday',
        'friday',
        'saturday'
      ];
      final dayKey = days[dayOfWeek];

      final schedule = workingHours[dayKey];
      if (schedule == null) return true; // –ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è - –∑–∞–∫—Ä—ã—Ç–æ

      if (schedule['is_closed'] == true) return true;
      if (schedule['is_24'] == true) return false;

      final openTimes = List<String>.from(schedule['open_times'] ?? []);
      final closeTimes = List<String>.from(schedule['close_times'] ?? []);

      final nowMinutes = now.hour * 60 + now.minute;

      for (var i = 0; i < openTimes.length; i++) {
        final open = _parseTime(openTimes[i]);
        final close = _parseTime(closeTimes[i]);

        if (open < close) {
          if (nowMinutes >= open && nowMinutes < close) return false;
        } else {
          if (nowMinutes >= open || nowMinutes < close) return false;
        }
      }

      return true; // –ù–∏ –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –ø–æ–¥–æ—à–µ–ª
    } catch (e) {
      return false;
    }
  }

  Future<void> updateOpenCloseStates() async {
    if (mapboxMapController == null) return;

    try {
      final now = DateTime.now();

      // –ü–æ–ª—É—á–∞–µ–º features —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
      final features = await mapboxMapController!.queryRenderedFeatures(
        mp.RenderedQueryGeometry(
          type: mp.Type.SCREEN_BOX,
          value: jsonEncode({
            "min": {"x": 0, "y": 0},
            "max": {"x": 10000, "y": 10000}
          }),
        ),
        mp.RenderedQueryOptions(
          layerIds: [placesLayerId],
          filter: null,
        ),
      );

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º features –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ 20 —à—Ç—É–∫ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      for (var i = 0; i < features.length; i += 20) {
        final batch = features.skip(i).take(20);
        await Future.wait(
          batch.map((feature) async {
            if (feature == null) return;

            final featureData = feature.queriedFeature.feature;
            final properties = featureData as Map<dynamic, dynamic>;
            final id = properties['id']?.toString();
            final nestedProperties =
                properties['properties'] as Map<dynamic, dynamic>?;

            if (id == null || nestedProperties == null) return;

            String? workingHours =
                nestedProperties['working_hours']?.toString();
            if (workingHours != null) {
              workingHours = workingHours.replaceAll('\\"', '"');
            }

            final isClosed = isPointClosedNow(workingHours, now);

            await mapboxMapController!.setFeatureState(
              "places_source",
              "mylayer",
              id,
              jsonEncode({"closed": isClosed}),
            );
          }),
        );
      }

      debugPrint("‚ú® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
    } catch (e, st) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ –≤ updateOpenCloseStates: $e");
      debugPrint("Stack trace: $st");
    }
  }

  double getThresholdByZoom(double zoom) {
    if (zoom < 6.0)
      return 3050;
    else if (zoom < 7.0)
      return 2850;
    else if (zoom < 7.5)
      return 2550;
    else if (zoom < 8.0)
      return 2350;
    else if (zoom < 8.5)
      return 2050;
    else if (zoom < 9.0)
      return 1850;
    else if (zoom < 9.5)
      return 1500;
    else if (zoom < 10.0)
      return 1200;
    else if (zoom < 10.5)
      return 1000;
    else if (zoom < 11.0)
      return 700;
    else if (zoom < 11.5)
      return 550;
    else if (zoom < 12.0)
      return 450;
    else if (zoom < 12.5)
      return 400;
    else if (zoom < 13.0)
      return 300;
    else if (zoom < 13.5)
      return 250;
    else if (zoom < 14.0)
      return 200;
    else if (zoom < 14.5)
      return 100;
    else if (zoom < 15.0)
      return 75;
    else if (zoom < 15.5)
      return 50;
    else if (zoom < 16.0)
      return 30;
    else if (zoom < 16.5)
      return 15;
    else if (zoom < 17.0)
      return 12;
    else if (zoom < 17.5)
      return 9;
    else if (zoom < 18.0)
      return 6;
    else if (zoom < 18.5)
      return 4;
    else if (zoom < 19.0)
      return 2;
    else
      return 0;
  }

  List<Object> buildIconImageExpression(double threshold) {
    return [
      "let",
      "myThreshold",
      threshold,
      [
        "case",
        // –ï—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—å—à–µ –ø–æ—Ä–æ–≥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º my_dot_icon
        [
          "<",
          [
            "to-number",
            [
              "coalesce",
              ["get", "min_dist"],
              0
            ]
          ],
          ["var", "myThreshold"]
        ],
        "my_dot_icon",
        // –ï—Å–ª–∏ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫—Ä—ã—Ç—É—é –≤–µ—Ä—Å–∏—é –∏–∫–æ–Ω–∫–∏
        [
          "==",
          ["feature-state", "closed"],
          true
        ],
        [
          "concat",
          ["get", "subca tegory"],
          "_closed"
        ],
        // –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –∏–∫–æ–Ω–∫—É
        ["get", "subcategory"]
      ]
    ];
  }

  List<Object> buildTextFieldExpression(double threshold) {
    return [
      "let",
      "myThreshold",
      threshold,
      [
        "case",
        [
          "<",
          [
            "to-number",
            [
              "coalesce",
              ["get", "min_dist"],
              0
            ]
          ],
          ["var", "myThreshold"]
        ],
        "",
        ["get", "name"]
      ]
    ];
  }

  List<Object> buildIconOpacityExpression() {
    return [
      "case",
      [
        "==",
        ["feature-state", "closed"],
        true
      ],
      0.6, // –µ—Å–ª–∏ closed = true, opacity = 0.7
      1.0 // –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö opacity = 1.0
    ];
  }
}

class NetworkAssetManager {
  Future<Uint8List?> downloadImage(String imageUrl) async {
    try {
      final uri = Uri.parse(imageUrl);
      debugPrint('‚¨áÔ∏è Downloading $uri');
      final httpClient = HttpClient();
      final request = await httpClient.getUrl(uri);
      final response = await request.close();
      if (response.statusCode != 200) {
        throw Exception('HTTP error: ${response.statusCode}');
      }
      final bytes = await consolidateHttpClientResponseBytes(response);
      debugPrint('‚úÖ Got ${bytes.length} bytes from $uri');
      return bytes;
    } catch (e, st) {
      debugPrint('‚ùå Error: $e\n$st');
      return null;
    }
  }
}
