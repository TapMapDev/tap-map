import 'package:tap_map/core/di/di.dart';
import 'package:tap_map/core/network/api_service.dart';
import 'package:tap_map/core/shared_prefs/shared_prefs_repo.dart';
import 'package:tap_map/features/password_reset/model/password_reset_response_model.dart';

class ResetPasswordRepositoryImpl {
  final ApiService apiService;
  final prefs = getIt.get<SharedPrefsRepository>();
  String? _resetEmail;
  String? _resetUid;
  String? _resetToken;

  ResetPasswordRepositoryImpl({required this.apiService});

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–ª—É–±–æ–∫–æ–π —Å—Å—ã–ª–∫–∏
  void handleResetPasswordLink(String url) {
    print('üîó Processing reset password link: $url');

    final uidMatch = RegExp(r'uid=([^&]+)').firstMatch(url);
    final tokenMatch = RegExp(r'token=([^&]+)').firstMatch(url);

    print('üîç Found matches:');
    print('UID match: ${uidMatch?.group(1)}');
    print('Token match: ${tokenMatch?.group(1)}');

    if (uidMatch != null && tokenMatch != null) {
      _resetUid = uidMatch.group(1);
      _resetToken = tokenMatch.group(1);

      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å URL-encoded —Å–∏–º–≤–æ–ª—ã
      _resetToken = Uri.decodeComponent(_resetToken!);

      print('‚úÖ Extracted values:');
      print('UID: $_resetUid');
      print('Token: $_resetToken');
    } else {
      print('‚ùå Invalid reset password link: required parameters not found');
      throw Exception('Invalid reset password link');
    }
  }

  Future<PasswordResetModel> sendConfirmationCode({
    required String email,
  }) async {
    try {
      _resetEmail = email;
      final response = await apiService.postData(
          '/auth/users/reset_password/',
          {
            'email': email,
          },
          useAuth: false);

      // Handle empty response
      if (response['data'] == null || response['data'].toString().isEmpty) {
        return PasswordResetModel(
          statusCode: response['statusCode'] ?? 200,
          message:
              '–õ–∏–Ω–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚Äã‚Äã–Ω–∞ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—ã.',
        );
      }

      if (response['data'] is String) {
        final data = response['data'] as String;
        return PasswordResetModel.fromJson(
            {'message': data}, response['statusCode']);
      } else if (response['data'] is Map) {
        return PasswordResetModel.fromJson(
            response['data'], response['statusCode']);
      } else {
        throw Exception('Unexpected response format: ${response['data']}');
      }
    } catch (e) {
      rethrow;
    }
  }

  Future<PasswordResetModel> setNewPassword({
    required String? uid,
    required String? token,
    required String newPassword,
  }) async {
    try {
      print('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è:');
      print('UID: $uid');
      print('Token: $token');
      print('Password length: ${newPassword.length}');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ uid –∏ token –Ω–µ null
      if (uid == null || token == null) {
        print('‚ùå UID –∏–ª–∏ Token —Ä–∞–≤–Ω—ã null');
        throw Exception('UID –∏ Token –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è');
      }

      final requestData = {
        'uid': uid,
        'token': token,
        'new_password': newPassword,
      };
      print('üì§ Request data: $requestData');

      final response = await apiService.postData(
          '/auth/users/reset_password_confirm/', requestData,
          useAuth: false);

      print('üì• Response status: ${response['statusCode']}');
      print('üì• Response data: ${response['data']}');

      // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (204)
      if (response['statusCode'] == 204) {
        return PasswordResetModel(
          statusCode: 204,
          message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!',
        );
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      if (response['data'] == null || response['data'].toString().isEmpty) {
        return PasswordResetModel(
          statusCode: response['statusCode'] ?? 200,
          message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!',
        );
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      if (response['data'] is String) {
        final data = response['data'] as String;
        return PasswordResetModel.fromJson(
            {'message': data}, response['statusCode']);
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON –æ—Ç–≤–µ—Ç–∞
      if (response['data'] is Map) {
        return PasswordResetModel.fromJson(
            response['data'], response['statusCode']);
      }

      // –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
      throw Exception('Unexpected response format: ${response['data']}');
    } catch (e) {
      print('‚ùå Error in setNewPassword: $e');
      rethrow;
    }
  }
}
