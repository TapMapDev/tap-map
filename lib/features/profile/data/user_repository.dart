import 'dart:convert';
import 'dart:io';

import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';
import 'package:tap_map/core/di/di.dart';
import 'package:tap_map/core/network/api_service.dart';
import 'package:tap_map/core/shared_prefs/shared_prefs_repo.dart';
import 'package:tap_map/features/profile/model/user_response_model.dart';

// TODO(tapmap): –£–ø—Ä–æ—Å—Ç–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, —É–±—Ä–∞—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—é IUserRepository –∏
// –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–¥–∏–Ω—ã–π –∫–ª–∞—Å—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.

abstract class IUserRepository {
  Future<UserModel> getCurrentUser();
  Future<UserModel> getUserByUsername(String username);
  Future<UserModel> getUserById(int userId);
  Future<UserModel> updateUser(UserModel user);
  Future<String> updateAvatar(File imageFile);
  Future<List<UserAvatarModel>> getUserAvatars();
  Future<bool> deleteAvatar(int avatarId);
  Future<PrivacySettings> updatePrivacySettings(
      PrivacySettings privacySettings);
  Future<PrivacySettings> getPrivacySettings();
  Future<void> blockUser(int userId);
  Future<void> unblockUser(int userId);
}

class UserRepository implements IUserRepository {
  final ApiService apiService;

  UserRepository({required this.apiService});

  @override
  Future<UserModel> getCurrentUser() async {
    try {
      final response = await apiService.getData('/users/me/');

      // Handle different response formats
      dynamic data;
      if (response['data'] is Map<String, dynamic>) {
        data = response['data'];
      } else if (response['data'] is String) {
        try {
          data = json.decode(response['data']);
        } catch (e) {
          throw Exception('Invalid JSON string: ${response['data']}');
        }
      } else {
        throw Exception('Unexpected response format: ${response['data']}');
      }

      return UserModel.fromJson(data);
    } catch (e) {
      throw Exception('Failed to get user data: $e');
    }
  }

  @override
  Future<UserModel> getUserByUsername(String username) async {
    try {
      debugPrint('üîÑ Making API request for username: $username');
      final response = await apiService.getData('/users/@$username/');
      debugPrint('üì• API Response: $response');

      if (response['statusCode'] == 200) {
        dynamic userData = response['data'];
        // –ï—Å–ª–∏ userData ‚Äî —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ HTML
        if (userData is String) {
          if (userData.trim().startsWith('<!DOCTYPE html>')) {
            throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
          }
          userData = json.decode(userData);
        }
        debugPrint('‚úÖ Parsing user data: $userData');
        return UserModel.fromJson(userData);
      } else {
        debugPrint('‚ùå API Error: ${response['data']}');
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É');
      }
    } catch (e) {
      debugPrint('‚ùå Repository Error: $e');
      rethrow;
    }
  }

  @override
  Future<UserModel> getUserById(int userId) async {
    try {
      debugPrint('üîÑ Making API request for user ID: $userId');
      final response = await apiService.getData('/users/$userId/');
      debugPrint('üì• API Response: $response');

      if (response['statusCode'] == 200) {
        dynamic userData = response['data'];
        if (userData is String) {
          if (userData.trim().startsWith('<!DOCTYPE html>')) {
            throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
          }
          userData = json.decode(userData);
        }
        debugPrint('‚úÖ Parsing user data: $userData');
        return UserModel.fromJson(userData);
      } else {
        debugPrint('‚ùå API Error: ${response['data']}');
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É');
      }
    } catch (e) {
      debugPrint('‚ùå Repository Error: $e');
      rethrow;
    }
  }

  @override
  Future<UserModel> updateUser(UserModel user) async {
    try {
      final body = user.toJson();

      // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      body.removeWhere((key, value) => value is String && value.isEmpty);

      final response = await apiService.patchData('/users/me/', body);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
      if (response['statusCode'] >= 400) {
        throw Exception(
            'Server returned error ${response['statusCode']}: ${response['data']}');
      }

      // Handle different response formats
      dynamic data;
      if (response['data'] is Map<String, dynamic>) {
        data = response['data'];
      } else if (response['data'] is String) {
        // If the response is a string, try to parse it as JSON
        try {
          data = json.decode(response['data']);
        } catch (e) {
          throw Exception('Invalid JSON string: ${response['data']}');
        }
      } else {
        throw Exception('Unexpected response format: ${response['data']}');
      }

      return UserModel.fromJson(data);
    } catch (e) {
      throw Exception('Failed to update user data: $e');
    }
  }

  @override
  Future<String> updateAvatar(File imageFile) async {
    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º MultipartFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
      final fileName = imageFile.path.split('/').last;
      final formData = FormData.fromMap({
        'image': await MultipartFile.fromFile(
          imageFile.path,
          filename: fileName,
        ),
      });

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ SharedPrefs
      final prefs = getIt.get<SharedPrefsRepository>();
      final authToken = await prefs.getAccessToken();

      if (authToken == null) {
        throw Exception('Access token is null');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
      final response = await apiService.dioClient.client.post(
        '/users/me/avatars/',
        data: formData,
        options: Options(
          headers: {
            'Authorization': 'Bearer $authToken',
          },
          validateStatus: (status) => true,
        ),
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
      if (response.statusCode == 200 || response.statusCode == 201) {
        final responseData = response.data;

        // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        if (responseData is Map<String, dynamic>) {
          if (responseData.containsKey('avatar_url') &&
              responseData['avatar_url'] != null) {
            return responseData['avatar_url'] as String;
          } else if (responseData.containsKey('url') &&
              responseData['url'] != null) {
            return responseData['url'] as String;
          } else if (responseData.containsKey('avatar') &&
              responseData['avatar'] != null) {
            return responseData['avatar'] as String;
          } else if (responseData.containsKey('image') &&
              responseData['image'] != null) {
            return responseData['image'] as String;
          } else {
            throw Exception('Server response does not contain avatar URL');
          }
        } else {
          throw Exception('Invalid response format from server');
        }
      } else {
        throw Exception(
            'Error uploading avatar: ${response.statusCode} - ${response.data}');
      }
    } catch (e) {
      if (e is DioException) {
        throw Exception(
            'Failed to update avatar: ${e.response?.data ?? e.message}');
      }
      throw Exception('Failed to update avatar: $e');
    }
  }

  @override
  Future<List<UserAvatarModel>> getUserAvatars() async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ SharedPrefs
      final prefs = getIt.get<SharedPrefsRepository>();
      final authToken = await prefs.getAccessToken();

      if (authToken == null) {
        throw Exception('Access token is null');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤
      final response = await apiService.dioClient.client.get(
        '/users/me/avatars/',
        options: Options(
          headers: {
            'Authorization': 'Bearer $authToken',
          },
        ),
      );

      if (response.statusCode == 200) {
        final List<dynamic> responseData = response.data;

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ dynamic –≤ —Å–ø–∏—Å–æ–∫ UserAvatarModel
        return responseData
            .map<UserAvatarModel>((item) =>
                UserAvatarModel.fromJson(item as Map<String, dynamic>))
            .toList();
      } else {
        throw Exception(
            'Error fetching avatars: ${response.statusCode} - ${response.data}');
      }
    } catch (e) {
      if (e is DioException) {
        throw Exception(
            'Failed to get avatars: ${e.response?.data ?? e.message}');
      }
      throw Exception('Failed to get avatars: $e');
    }
  }

  @override
  Future<bool> deleteAvatar(int avatarId) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ SharedPrefs
      final prefs = getIt.get<SharedPrefsRepository>();
      final authToken = await prefs.getAccessToken();

      if (authToken == null) {
        throw Exception('Access token is null');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
      final response = await apiService.dioClient.client.delete(
        '/users/me/avatars/$avatarId/',
        options: Options(
          headers: {
            'Authorization': 'Bearer $authToken',
          },
          validateStatus: (status) => true,
        ),
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
      if (response.statusCode == 204 || response.statusCode == 200) {
        return true;
      } else {
        throw Exception(
            'Error deleting avatar: ${response.statusCode} - ${response.data}');
      }
    } catch (e) {
      if (e is DioException) {
        throw Exception(
            'Failed to delete avatar: ${e.response?.data ?? e.message}');
      }
      throw Exception('Failed to delete avatar: $e');
    }
  }

  @override
  Future<PrivacySettings> updatePrivacySettings(
      PrivacySettings privacySettings) async {
    try {
      final body = {
        'is_searchable_by_email': privacySettings.isSearchableByEmail == true,
        'is_searchable_by_phone': privacySettings.isSearchableByPhone == true
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ null
      if (privacySettings.isShowGeolocationToFriends != null) {
        body['is_show_geolocation_to_friends'] =
            privacySettings.isShowGeolocationToFriends == true;
      }

      if (privacySettings.isPreciseGeolocation != null) {
        body['is_precise_geolocation'] =
            privacySettings.isPreciseGeolocation == true;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
      final response = await apiService.patchData('/users/me/privacy/', body);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
      if (response['statusCode'] >= 400) {
        throw Exception(
            'Server returned error ${response['statusCode']}: ${response['data']}');
      }

      // Handle different response formats
      dynamic data;
      if (response['data'] is Map<String, dynamic>) {
        data = response['data'];
      } else if (response['data'] is String) {
        // If the response is a string, try to parse it as JSON
        try {
          data = json.decode(response['data']);
        } catch (e) {
          throw Exception('Invalid JSON string: ${response['data']}');
        }
      } else {
        throw Exception('Unexpected response format: ${response['data']}');
      }

      return PrivacySettings.fromJson(data);
    } catch (e) {
      throw Exception('Failed to update privacy settings: $e');
    }
  }

  @override
  Future<PrivacySettings> getPrivacySettings() async {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
      final response = await apiService.getData('/users/me/privacy/');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
      if (response['statusCode'] >= 400) {
        throw Exception(
            'Server returned error ${response['statusCode']}: ${response['data']}');
      }

      // Handle different response formats
      dynamic data;
      if (response['data'] is Map<String, dynamic>) {
        data = response['data'];
      } else if (response['data'] is String) {
        // If the response is a string, try to parse it as JSON
        try {
          data = json.decode(response['data']);
        } catch (e) {
          throw Exception('Invalid JSON string: ${response['data']}');
        }
      } else {
        throw Exception('Unexpected response format: ${response['data']}');
      }

      return PrivacySettings.fromJson(data);
    } catch (e) {
      throw Exception('Failed to get privacy settings: $e');
    }
  }

  @override
  Future<void> blockUser(int userId) async {
    try {
      await apiService.postData('/users/block/$userId/', {});
    } catch (e) {
      throw Exception('Failed to block user: $e');
    }
  }

  @override
  Future<void> unblockUser(int userId) async {
    try {
      await apiService.postData('/users/unblock/$userId/', {});
    } catch (e) {
      throw Exception('Failed to unblock user: $e');
    }
  }

  /// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ email.
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
  /// TODO(tapmap): —É—Ç–æ—á–Ω–∏—Ç—å –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É API –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞.
  Future<List<UserModel>> searchUsers(String query) async {
    try {
      final response = await apiService.getData(
        '/users/search/',
        queryParams: {'query': query},
      );

      if (response['statusCode'] == 200) {
        final data = response['data'];
        if (data is List) {
          return UserModel.fromJsonList(data);
        } else if (data is Map<String, dynamic> && data['results'] is List) {
          return UserModel.fromJsonList(data['results'] as List);
        }
        return [];
      } else {
        throw Exception('Search request failed: ${response['statusCode']}');
      }
    } catch (e) {
      throw Exception('Failed to search users: $e');
    }
  }
}
